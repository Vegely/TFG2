
ECC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d18  08002d18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d20  08002d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002d34  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005540  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001028  00000000  00000000  000255bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  000265e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ad  00000000  00000000  00026c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000153d8  00000000  00000000  000270ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006312  00000000  00000000  0003c485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000847fe  00000000  00000000  00042797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000189c  00000000  00000000  000c6f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c8834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002c3c 	.word	0x08002c3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08002c3c 	.word	0x08002c3c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 fdb3 	bl	800204c <HAL_Init>

  /* USER CODE BEGIN Init */
  const struct uECC_Curve_t * curve = uECC_secp160r1();
 80004e6:	f000 fef5 	bl	80012d4 <uECC_secp160r1>
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f870 	bl	80005d0 <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	time0 = HAL_GetTick();
 80004f0:	f001 fe12 	bl	8002118 <HAL_GetTick>
 80004f4:	4603      	mov	r3, r0
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <main+0xd0>)
 80004fa:	601a      	str	r2, [r3, #0]
	    uECC_make_key(public1, private1, curve);
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	492c      	ldr	r1, [pc, #176]	; (80005b0 <main+0xd4>)
 8000500:	482c      	ldr	r0, [pc, #176]	; (80005b4 <main+0xd8>)
 8000502:	f001 fc6a 	bl	8001dda <uECC_make_key>
	    time0 = HAL_GetTick()-time0;
 8000506:	f001 fe07 	bl	8002118 <HAL_GetTick>
 800050a:	4603      	mov	r3, r0
 800050c:	4a27      	ldr	r2, [pc, #156]	; (80005ac <main+0xd0>)
 800050e:	6812      	ldr	r2, [r2, #0]
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	461a      	mov	r2, r3
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <main+0xd0>)
 8000516:	601a      	str	r2, [r3, #0]

	    time1 = HAL_GetTick();
 8000518:	f001 fdfe 	bl	8002118 <HAL_GetTick>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <main+0xdc>)
 8000522:	601a      	str	r2, [r3, #0]
	    uECC_make_key(public2, private2, curve);
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4925      	ldr	r1, [pc, #148]	; (80005bc <main+0xe0>)
 8000528:	4825      	ldr	r0, [pc, #148]	; (80005c0 <main+0xe4>)
 800052a:	f001 fc56 	bl	8001dda <uECC_make_key>
	    time1 = HAL_GetTick()-time1;
 800052e:	f001 fdf3 	bl	8002118 <HAL_GetTick>
 8000532:	4603      	mov	r3, r0
 8000534:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <main+0xdc>)
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	461a      	mov	r2, r3
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <main+0xdc>)
 800053e:	601a      	str	r2, [r3, #0]

	    time2 = HAL_GetTick();
 8000540:	f001 fdea 	bl	8002118 <HAL_GetTick>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <main+0xe8>)
 800054a:	601a      	str	r2, [r3, #0]
	    int r = uECC_shared_secret(public2, private1, secret1, curve);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <main+0xec>)
 8000550:	4917      	ldr	r1, [pc, #92]	; (80005b0 <main+0xd4>)
 8000552:	481b      	ldr	r0, [pc, #108]	; (80005c0 <main+0xe4>)
 8000554:	f001 fca6 	bl	8001ea4 <uECC_shared_secret>
 8000558:	6038      	str	r0, [r7, #0]
	    time2 = HAL_GetTick()-time2;
 800055a:	f001 fddd 	bl	8002118 <HAL_GetTick>
 800055e:	4603      	mov	r3, r0
 8000560:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <main+0xe8>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	461a      	mov	r2, r3
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <main+0xe8>)
 800056a:	601a      	str	r2, [r3, #0]

	    if (!r) {
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d012      	beq.n	8000598 <main+0xbc>
	    	break;
	    }


	    r = uECC_shared_secret(public1, private2, secret2, curve);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a15      	ldr	r2, [pc, #84]	; (80005cc <main+0xf0>)
 8000576:	4911      	ldr	r1, [pc, #68]	; (80005bc <main+0xe0>)
 8000578:	480e      	ldr	r0, [pc, #56]	; (80005b4 <main+0xd8>)
 800057a:	f001 fc93 	bl	8001ea4 <uECC_shared_secret>
 800057e:	6038      	str	r0, [r7, #0]
	    if (!r) {
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <main+0xc0>
	      break;
	    }

	    if (memcmp(secret1, secret2, 20) != 0) {
 8000586:	2214      	movs	r2, #20
 8000588:	4910      	ldr	r1, [pc, #64]	; (80005cc <main+0xf0>)
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <main+0xec>)
 800058c:	f002 fb1a 	bl	8002bc4 <memcmp>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d104      	bne.n	80005a0 <main+0xc4>
  {
 8000596:	e7ab      	b.n	80004f0 <main+0x14>
	    	break;
 8000598:	bf00      	nop
 800059a:	e002      	b.n	80005a2 <main+0xc6>
	      break;
 800059c:	bf00      	nop
 800059e:	e000      	b.n	80005a2 <main+0xc6>
	    	break;
 80005a0:	bf00      	nop
 80005a2:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000028 	.word	0x20000028
 80005b0:	20000034 	.word	0x20000034
 80005b4:	20000064 	.word	0x20000064
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	2000004c 	.word	0x2000004c
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	20000030 	.word	0x20000030
 80005c8:	200000b4 	.word	0x200000b4
 80005cc:	200000c8 	.word	0x200000c8

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fb00 	bl	8002be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000644:	23c0      	movs	r3, #192	; 0xc0
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000648:	2304      	movs	r3, #4
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fe51 	bl	80022fc <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 f820 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2103      	movs	r1, #3
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f8b2 	bl	80027ec <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 f809 	bl	80006a4 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x8>
	...

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <HAL_MspInit+0x4c>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_MspInit+0x4c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ee:	2007      	movs	r0, #7
 80006f0:	f001 fdd0 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f001 fcd0 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <SystemInit+0x20>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <SystemInit+0x20>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00
	...

08000780 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 8000780:	b4f0      	push	{r4, r5, r6, r7}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 800078e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000792:	f1c3 0308 	rsb	r3, r3, #8
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	3301      	adds	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2600      	movs	r6, #0
 80007a6:	a505      	add	r5, pc, #20	; (adr r5, 80007bc <uECC_vli_add+0x3c>)
 80007a8:	f3af 8000 	nop.w
 80007ac:	f3af 8000 	nop.w
 80007b0:	195b      	adds	r3, r3, r5
 80007b2:	c920      	ldmia	r1!, {r5}
 80007b4:	ca10      	ldmia	r2!, {r4}
 80007b6:	192d      	adds	r5, r5, r4
 80007b8:	c020      	stmia	r0!, {r5}
 80007ba:	4718      	bx	r3
 80007bc:	c920      	ldmia	r1!, {r5}
 80007be:	ca10      	ldmia	r2!, {r4}
 80007c0:	4165      	adcs	r5, r4
 80007c2:	c020      	stmia	r0!, {r5}
 80007c4:	c920      	ldmia	r1!, {r5}
 80007c6:	ca10      	ldmia	r2!, {r4}
 80007c8:	4165      	adcs	r5, r4
 80007ca:	c020      	stmia	r0!, {r5}
 80007cc:	c920      	ldmia	r1!, {r5}
 80007ce:	ca10      	ldmia	r2!, {r4}
 80007d0:	4165      	adcs	r5, r4
 80007d2:	c020      	stmia	r0!, {r5}
 80007d4:	c920      	ldmia	r1!, {r5}
 80007d6:	ca10      	ldmia	r2!, {r4}
 80007d8:	4165      	adcs	r5, r4
 80007da:	c020      	stmia	r0!, {r5}
 80007dc:	c920      	ldmia	r1!, {r5}
 80007de:	ca10      	ldmia	r2!, {r4}
 80007e0:	4165      	adcs	r5, r4
 80007e2:	c020      	stmia	r0!, {r5}
 80007e4:	c920      	ldmia	r1!, {r5}
 80007e6:	ca10      	ldmia	r2!, {r4}
 80007e8:	4165      	adcs	r5, r4
 80007ea:	c020      	stmia	r0!, {r5}
 80007ec:	c920      	ldmia	r1!, {r5}
 80007ee:	ca10      	ldmia	r2!, {r4}
 80007f0:	4165      	adcs	r5, r4
 80007f2:	c020      	stmia	r0!, {r5}
 80007f4:	4176      	adcs	r6, r6
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	61be      	str	r6, [r7, #24]
 8000800:	617d      	str	r5, [r7, #20]
 8000802:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
 8000804:	69bb      	ldr	r3, [r7, #24]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bcf0      	pop	{r4, r5, r6, r7}
 800080e:	4770      	bx	lr

08000810 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 8000810:	b4f0      	push	{r4, r5, r6, r7}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 800081e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000822:	f1c3 0308 	rsb	r3, r3, #8
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	3301      	adds	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	2600      	movs	r6, #0
 8000836:	a505      	add	r5, pc, #20	; (adr r5, 800084c <uECC_vli_sub+0x3c>)
 8000838:	f3af 8000 	nop.w
 800083c:	f3af 8000 	nop.w
 8000840:	195b      	adds	r3, r3, r5
 8000842:	c920      	ldmia	r1!, {r5}
 8000844:	ca10      	ldmia	r2!, {r4}
 8000846:	1b2d      	subs	r5, r5, r4
 8000848:	c020      	stmia	r0!, {r5}
 800084a:	4718      	bx	r3
 800084c:	c920      	ldmia	r1!, {r5}
 800084e:	ca10      	ldmia	r2!, {r4}
 8000850:	41a5      	sbcs	r5, r4
 8000852:	c020      	stmia	r0!, {r5}
 8000854:	c920      	ldmia	r1!, {r5}
 8000856:	ca10      	ldmia	r2!, {r4}
 8000858:	41a5      	sbcs	r5, r4
 800085a:	c020      	stmia	r0!, {r5}
 800085c:	c920      	ldmia	r1!, {r5}
 800085e:	ca10      	ldmia	r2!, {r4}
 8000860:	41a5      	sbcs	r5, r4
 8000862:	c020      	stmia	r0!, {r5}
 8000864:	c920      	ldmia	r1!, {r5}
 8000866:	ca10      	ldmia	r2!, {r4}
 8000868:	41a5      	sbcs	r5, r4
 800086a:	c020      	stmia	r0!, {r5}
 800086c:	c920      	ldmia	r1!, {r5}
 800086e:	ca10      	ldmia	r2!, {r4}
 8000870:	41a5      	sbcs	r5, r4
 8000872:	c020      	stmia	r0!, {r5}
 8000874:	c920      	ldmia	r1!, {r5}
 8000876:	ca10      	ldmia	r2!, {r4}
 8000878:	41a5      	sbcs	r5, r4
 800087a:	c020      	stmia	r0!, {r5}
 800087c:	c920      	ldmia	r1!, {r5}
 800087e:	ca10      	ldmia	r2!, {r4}
 8000880:	41a5      	sbcs	r5, r4
 8000882:	c020      	stmia	r0!, {r5}
 8000884:	4176      	adcs	r6, r6
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	61be      	str	r6, [r7, #24]
 8000890:	617d      	str	r5, [r7, #20]
 8000892:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf0c      	ite	eq
 800089a:	2301      	moveq	r3, #1
 800089c:	2300      	movne	r3, #0
 800089e:	b2db      	uxtb	r3, r3
                      (for some reason...) */
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bcf0      	pop	{r4, r5, r6, r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
 80008ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008b0:	b08d      	sub	sp, #52	; 0x34
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	70fb      	strb	r3, [r7, #3]
#if (uECC_PLATFORM != uECC_arm_thumb)
    uint32_t c0 = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t c1 = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t c2 = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t k = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
        "str %[c0], [%[result], %[k]] \n\t" /* result[num_words * 2 - 1] = c0 */
        RESUME_SYNTAX
        : [c0] "+r" (c0), [c1] "+r" (c1), [c2] "+r" (c2),
          [k] "+r" (k), [i] "=&r" (i), [t0] "=&r" (t0), [t1] "=&r" (t1)
        : [result] "r" (result), [left] "r" (left), [right] "r" (right),
          [last_word] "r" ((num_words - 1) * 4)
 80008cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    __asm__ volatile (
 80008d6:	68fc      	ldr	r4, [r7, #12]
 80008d8:	68bd      	ldr	r5, [r7, #8]
 80008da:	687e      	ldr	r6, [r7, #4]
 80008dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80008de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80008e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	f05f 0e00 	movs.w	lr, #0
 80008e8:	e003      	b.n	80008f2 <uECC_vli_mult+0x46>
 80008ea:	ea5f 0e03 	movs.w	lr, r3
 80008ee:	ebbe 0e0c 	subs.w	lr, lr, ip
 80008f2:	ebb3 080e 	subs.w	r8, r3, lr
 80008f6:	f856 9008 	ldr.w	r9, [r6, r8]
 80008fa:	f855 800e 	ldr.w	r8, [r5, lr]
 80008fe:	fba8 8909 	umull	r8, r9, r8, r9
 8000902:	eb10 0008 	adds.w	r0, r0, r8
 8000906:	eb51 0109 	adcs.w	r1, r1, r9
 800090a:	f152 0200 	adcs.w	r2, r2, #0
 800090e:	f11e 0e04 	adds.w	lr, lr, #4
 8000912:	45e6      	cmp	lr, ip
 8000914:	dc01      	bgt.n	800091a <uECC_vli_mult+0x6e>
 8000916:	459e      	cmp	lr, r3
 8000918:	ddeb      	ble.n	80008f2 <uECC_vli_mult+0x46>
 800091a:	50e0      	str	r0, [r4, r3]
 800091c:	4608      	mov	r0, r1
 800091e:	4611      	mov	r1, r2
 8000920:	2200      	movs	r2, #0
 8000922:	3304      	adds	r3, #4
 8000924:	4563      	cmp	r3, ip
 8000926:	dddd      	ble.n	80008e4 <uECC_vli_mult+0x38>
 8000928:	ebb3 0f4c 	cmp.w	r3, ip, lsl #1
 800092c:	dddd      	ble.n	80008ea <uECC_vli_mult+0x3e>
 800092e:	50e0      	str	r0, [r4, r3]
 8000930:	464c      	mov	r4, r9
 8000932:	4645      	mov	r5, r8
 8000934:	4676      	mov	r6, lr
 8000936:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000938:	62b9      	str	r1, [r7, #40]	; 0x28
 800093a:	627a      	str	r2, [r7, #36]	; 0x24
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	61fe      	str	r6, [r7, #28]
 8000940:	61bd      	str	r5, [r7, #24]
 8000942:	617c      	str	r4, [r7, #20]
          [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
        : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
        : "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
#endif
}
 8000944:	bf00      	nop
 8000946:	3734      	adds	r7, #52	; 0x34
 8000948:	46bd      	mov	sp, r7
 800094a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800094e <uECC_vli_clear>:
int uECC_curve_public_key_size(uECC_Curve curve) {
    return 2 * curve->num_bytes;
}

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	e00a      	b.n	8000976 <uECC_vli_clear+0x28>
        vli[i] = 0;
 8000960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	3301      	adds	r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800097a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800097e:	429a      	cmp	r2, r3
 8000980:	dbee      	blt.n	8000960 <uECC_vli_clear+0x12>
    }
}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <uECC_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
    uECC_word_t bits = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	72fb      	strb	r3, [r7, #11]
 80009a4:	e00c      	b.n	80009c0 <uECC_vli_isZero+0x30>
        bits |= vli[i];
 80009a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < num_words; ++i) {
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	72fb      	strb	r3, [r7, #11]
 80009c0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80009c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbec      	blt.n	80009a6 <uECC_vli_isZero+0x16>
    }
    return (bits == 0);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <uECC_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80009f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009f4:	115b      	asrs	r3, r3, #5
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	f003 031f 	and.w	r3, r3, #31
 8000a06:	2101      	movs	r1, #1
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	4013      	ands	r3, r2
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
 8000a1a:	b480      	push	{r7}
 8000a1c:	b085      	sub	sp, #20
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    /* Search from the end until we find a non-zero digit.
       We do it in reverse because we expect that most digits will be nonzero. */
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e003      	b.n	8000a38 <vli_numDigits+0x1e>
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db07      	blt.n	8000a50 <vli_numDigits+0x36>
 8000a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0ef      	beq.n	8000a30 <vli_numDigits+0x16>
    }

    return (i + 1);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	b25b      	sxtb	r3, r3
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <uECC_vli_numBits>:

/* Counts the number of bits required to represent vli. */
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	70fb      	strb	r3, [r7, #3]
    uECC_word_t i;
    uECC_word_t digit;

    wordcount_t num_digits = vli_numDigits(vli, max_words);
 8000a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a74:	4619      	mov	r1, r3
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffcf 	bl	8000a1a <vli_numDigits>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
    if (num_digits == 0) {
 8000a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d101      	bne.n	8000a8c <uECC_vli_numBits+0x28>
        return 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e021      	b.n	8000ad0 <uECC_vli_numBits+0x6c>
    }

    digit = vli[num_digits - 1];
 8000a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a94:	3b01      	subs	r3, #1
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e005      	b.n	8000ab2 <uECC_vli_numBits+0x4e>
        digit >>= 1;
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f6      	bne.n	8000aa6 <uECC_vli_numBits+0x42>
    }

    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 8000ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	015b      	lsls	r3, r3, #5
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4413      	add	r3, r2
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b21b      	sxth	r3, r3
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <uECC_vli_set>:

/* Sets dest = src. */
#if !asm_set
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	75fb      	strb	r3, [r7, #23]
 8000aea:	e00f      	b.n	8000b0c <uECC_vli_set+0x34>
        dest[i] = src[i];
 8000aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	441a      	add	r2, r3
 8000af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	68f9      	ldr	r1, [r7, #12]
 8000afe:	440b      	add	r3, r1
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000b04:	7dfb      	ldrb	r3, [r7, #23]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	75fb      	strb	r3, [r7, #23]
 8000b0c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbe9      	blt.n	8000aec <uECC_vli_set+0x14>
    }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	371c      	adds	r7, #28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 8000b26:	b480      	push	{r7}
 8000b28:	b087      	sub	sp, #28
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	4613      	mov	r3, r2
 8000b32:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	75fb      	strb	r3, [r7, #23]
 8000b3c:	e024      	b.n	8000b88 <uECC_vli_cmp_unsafe+0x62>
        if (left[i] > right[i]) {
 8000b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	440b      	add	r3, r1
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d901      	bls.n	8000b5e <uECC_vli_cmp_unsafe+0x38>
            return 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e019      	b.n	8000b92 <uECC_vli_cmp_unsafe+0x6c>
        } else if (left[i] < right[i]) {
 8000b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	440b      	add	r3, r1
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d202      	bcs.n	8000b80 <uECC_vli_cmp_unsafe+0x5a>
            return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e008      	b.n	8000b92 <uECC_vli_cmp_unsafe+0x6c>
    for (i = num_words - 1; i >= 0; --i) {
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	75fb      	strb	r3, [r7, #23]
 8000b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	dad6      	bge.n	8000b3e <uECC_vli_cmp_unsafe+0x18>
        }
    }
    return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <uECC_vli_cmp>:
                                      wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
uECC_VLI_API cmpresult_t uECC_vli_cmp(const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b08e      	sub	sp, #56	; 0x38
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71fb      	strb	r3, [r7, #7]
    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	f107 0010 	add.w	r0, r7, #16
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	f7ff fe2a 	bl	8000810 <uECC_vli_sub>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
    uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 8000bca:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fedb 	bl	8000990 <uECC_vli_isZero>
 8000bda:	6338      	str	r0, [r7, #48]	; 0x30
    return (!equal - 2 * neg);
 8000bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf0c      	ite	eq
 8000be2:	2301      	moveq	r3, #1
 8000be4:	2300      	movne	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	b25b      	sxtb	r3, r3
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3738      	adds	r7, #56	; 0x38
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <uECC_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
    uECC_word_t *end = vli;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	613b      	str	r3, [r7, #16]
    uECC_word_t carry = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

    vli += num_words;
 8000c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	607b      	str	r3, [r7, #4]
    while (vli-- > end) {
 8000c20:	e00b      	b.n	8000c3a <uECC_vli_rshift1+0x3a>
        uECC_word_t temp = *vli;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	60fb      	str	r3, [r7, #12]
        *vli = (temp >> 1) | carry;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	085a      	lsrs	r2, r3, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	07db      	lsls	r3, r3, #31
 8000c38:	617b      	str	r3, [r7, #20]
    while (vli-- > end) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	1f1a      	subs	r2, r3, #4
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3ed      	bcc.n	8000c22 <uECC_vli_rshift1+0x22>
    }
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <uECC_vli_modAdd>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	603b      	str	r3, [r7, #0]
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8000c62:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff fd88 	bl	8000780 <uECC_vli_add>
 8000c70:	6178      	str	r0, [r7, #20]
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d109      	bne.n	8000c8c <uECC_vli_modAdd+0x38>
 8000c78:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68f9      	ldr	r1, [r7, #12]
 8000c80:	6838      	ldr	r0, [r7, #0]
 8000c82:	f7ff ff50 	bl	8000b26 <uECC_vli_cmp_unsafe>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d006      	beq.n	8000c9a <uECC_vli_modAdd+0x46>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        uECC_vli_sub(result, result, mod, num_words);
 8000c8c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	68f9      	ldr	r1, [r7, #12]
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff fdbb 	bl	8000810 <uECC_vli_sub>
    }
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <uECC_vli_modSub>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	603b      	str	r3, [r7, #0]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8000cb0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff fda9 	bl	8000810 <uECC_vli_sub>
 8000cbe:	6178      	str	r0, [r7, #20]
    if (l_borrow) {
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <uECC_vli_modSub+0x32>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        uECC_vli_add(result, result, mod, num_words);
 8000cc6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff fd56 	bl	8000780 <uECC_vli_add>
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <uECC_vli_modMult_fast>:
}

uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,
                                        const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        uECC_Curve curve) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	; 0x50
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, curve->num_words);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf0:	f107 0010 	add.w	r0, r7, #16
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	f7ff fdd8 	bl	80008ac <uECC_vli_mult>
#if (uECC_OPTIMIZATION_LEVEL > 0)
    curve->mmod_fast(result, product);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000d02:	f107 0210 	add.w	r2, r7, #16
 8000d06:	4611      	mov	r1, r2
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	4798      	blx	r3
#else
    uECC_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	; 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <uECC_vli_modSquare_fast>:
}
#endif /* uECC_ENABLE_VLI_API */

uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
                                          const uECC_word_t *left,
                                          uECC_Curve curve) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
    uECC_vli_modMult_fast(result, left, left, curve);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff ffd8 	bl	8000cdc <uECC_vli_modMult_fast>
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <vli_modInv_update>:
#endif /* uECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(uECC_word_t *uv,
                              const uECC_word_t *mod,
                              wordcount_t num_words) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71fb      	strb	r3, [r7, #7]
    uECC_word_t carry = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
    if (!EVEN(uv)) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <vli_modInv_update+0x2e>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f7ff fd10 	bl	8000780 <uECC_vli_add>
 8000d60:	6178      	str	r0, [r7, #20]
    }
    uECC_vli_rshift1(uv, num_words);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4619      	mov	r1, r3
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff ff49 	bl	8000c00 <uECC_vli_rshift1>
    if (carry) {
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d013      	beq.n	8000d9c <vli_modInv_update+0x68>
        uv[num_words - 1] |= HIGH_BIT_SET;
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	68f9      	ldr	r1, [r7, #12]
 8000d94:	440b      	add	r3, r1
 8000d96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d9a:	601a      	str	r2, [r3, #0]
    }
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <uECC_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
                                  const uECC_word_t *input,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0a6      	sub	sp, #152	; 0x98
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	70fb      	strb	r3, [r7, #3]
    uECC_word_t a[uECC_MAX_WORDS], b[uECC_MAX_WORDS], u[uECC_MAX_WORDS], v[uECC_MAX_WORDS];
    cmpresult_t cmpResult;

    if (uECC_vli_isZero(input, num_words)) {
 8000db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000db6:	4619      	mov	r1, r3
 8000db8:	68b8      	ldr	r0, [r7, #8]
 8000dba:	f7ff fde9 	bl	8000990 <uECC_vli_isZero>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <uECC_vli_modInv+0x2e>
        uECC_vli_clear(result, num_words);
 8000dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fdbf 	bl	800094e <uECC_vli_clear>
 8000dd0:	e0de      	b.n	8000f90 <uECC_vli_modInv+0x1ec>
        return;
    }

    uECC_vli_set(a, input, num_words);
 8000dd2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000dd6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe7b 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 8000de2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000de6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe73 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 8000df2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000df6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fda6 	bl	800094e <uECC_vli_clear>
    u[0] = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    uECC_vli_clear(v, num_words);
 8000e06:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fd9c 	bl	800094e <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8000e16:	e0a2      	b.n	8000f5e <uECC_vli_modInv+0x1ba>
        if (EVEN(a)) {
 8000e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d110      	bne.n	8000e44 <uECC_vli_modInv+0xa0>
            uECC_vli_rshift1(a, num_words);
 8000e22:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fee7 	bl	8000c00 <uECC_vli_rshift1>
            vli_modInv_update(u, mod, num_words);
 8000e32:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff79 	bl	8000d34 <vli_modInv_update>
 8000e42:	e08c      	b.n	8000f5e <uECC_vli_modInv+0x1ba>
        } else if (EVEN(b)) {
 8000e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d110      	bne.n	8000e70 <uECC_vli_modInv+0xcc>
            uECC_vli_rshift1(b, num_words);
 8000e4e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fed1 	bl	8000c00 <uECC_vli_rshift1>
            vli_modInv_update(v, mod, num_words);
 8000e5e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff63 	bl	8000d34 <vli_modInv_update>
 8000e6e:	e076      	b.n	8000f5e <uECC_vli_modInv+0x1ba>
        } else if (cmpResult > 0) {
 8000e70:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dd39      	ble.n	8000eec <uECC_vli_modInv+0x148>
            uECC_vli_sub(a, a, b, num_words);
 8000e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e7c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000e80:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000e84:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000e88:	f7ff fcc2 	bl	8000810 <uECC_vli_sub>
            uECC_vli_rshift1(a, num_words);
 8000e8c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff feb2 	bl	8000c00 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 8000e9c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000ea0:	f107 0114 	add.w	r1, r7, #20
 8000ea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe3c 	bl	8000b26 <uECC_vli_cmp_unsafe>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	da08      	bge.n	8000ec6 <uECC_vli_modInv+0x122>
                uECC_vli_add(u, u, mod, num_words);
 8000eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eb8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000ebc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	f7ff fc5d 	bl	8000780 <uECC_vli_add>
            }
            uECC_vli_sub(u, u, v, num_words);
 8000ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eca:	f107 0214 	add.w	r2, r7, #20
 8000ece:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000ed2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ed6:	f7ff fc9b 	bl	8000810 <uECC_vli_sub>
            vli_modInv_update(u, mod, num_words);
 8000eda:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff25 	bl	8000d34 <vli_modInv_update>
 8000eea:	e038      	b.n	8000f5e <uECC_vli_modInv+0x1ba>
        } else {
            uECC_vli_sub(b, b, a, num_words);
 8000eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ef0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000ef4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000ef8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000efc:	f7ff fc88 	bl	8000810 <uECC_vli_sub>
            uECC_vli_rshift1(b, num_words);
 8000f00:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe78 	bl	8000c00 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 8000f10:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000f14:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fe02 	bl	8000b26 <uECC_vli_cmp_unsafe>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da08      	bge.n	8000f3a <uECC_vli_modInv+0x196>
                uECC_vli_add(v, v, mod, num_words);
 8000f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f2c:	f107 0114 	add.w	r1, r7, #20
 8000f30:	f107 0014 	add.w	r0, r7, #20
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	f7ff fc23 	bl	8000780 <uECC_vli_add>
            }
            uECC_vli_sub(v, v, u, num_words);
 8000f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f42:	f107 0114 	add.w	r1, r7, #20
 8000f46:	f107 0014 	add.w	r0, r7, #20
 8000f4a:	f7ff fc61 	bl	8000810 <uECC_vli_sub>
            vli_modInv_update(v, mod, num_words);
 8000f4e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff feeb 	bl	8000d34 <vli_modInv_update>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8000f5e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000f62:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000f66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fddb 	bl	8000b26 <uECC_vli_cmp_unsafe>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000f76:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f af4c 	bne.w	8000e18 <uECC_vli_modInv+0x74>
        }
    }
    uECC_vli_set(result, u, num_words);
 8000f80:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000f84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f88:	4619      	mov	r1, r3
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fda4 	bl	8000ad8 <uECC_vli_set>
}
 8000f90:	3798      	adds	r7, #152	; 0x98
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <double_jacobian_default>:
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp224r1 || uECC_SUPPORTS_secp256r1
static void double_jacobian_default(uECC_word_t * X1,
                                    uECC_word_t * Y1,
                                    uECC_word_t * Z1,
                                    uECC_Curve curve) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b098      	sub	sp, #96	; 0x60
 8000f9a:	af02      	add	r7, sp, #8
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	603b      	str	r3, [r7, #0]
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[uECC_MAX_WORDS];
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    if (uECC_vli_isZero(Z1, num_words)) {
 8000fac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fcec 	bl	8000990 <uECC_vli_isZero>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 80e6 	bne.w	800118c <double_jacobian_default+0x1f6>
        return;
    }

    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8000fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fea3 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8000fce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000fd2:	f107 0010 	add.w	r0, r7, #16
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	f7ff fe7f 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8000fde:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe93 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	68b8      	ldr	r0, [r7, #8]
 8000ff6:	f7ff fe71 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fe88 	bl	8000d14 <uECC_vli_modSquare_fast>

    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	1d1a      	adds	r2, r3, #4
 8001008:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	4613      	mov	r3, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68f9      	ldr	r1, [r7, #12]
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fe1d 	bl	8000c54 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	1d1a      	adds	r2, r3, #4
 800101e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fe12 	bl	8000c54 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	1d1a      	adds	r2, r3, #4
 8001034:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68f9      	ldr	r1, [r7, #12]
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fe2e 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff fe45 	bl	8000cdc <uECC_vli_modMult_fast>

    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	1d1a      	adds	r2, r3, #4
 8001056:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4613      	mov	r3, r2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	68f9      	ldr	r1, [r7, #12]
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fdf6 	bl	8000c54 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	1d1a      	adds	r2, r3, #4
 800106c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fdeb 	bl	8000c54 <uECC_vli_modAdd>
    if (uECC_vli_testBit(X1, 0)) {
 800107e:	2100      	movs	r1, #0
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fcaf 	bl	80009e4 <uECC_vli_testBit>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d024      	beq.n	80010d6 <double_jacobian_default+0x140>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	1d1a      	adds	r2, r3, #4
 8001090:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001094:	68f9      	ldr	r1, [r7, #12]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fb72 	bl	8000780 <uECC_vli_add>
 800109c:	6538      	str	r0, [r7, #80]	; 0x50
        uECC_vli_rshift1(X1, num_words);
 800109e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010a2:	4619      	mov	r1, r3
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fdab 	bl	8000c00 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 80010aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010b2:	3b01      	subs	r3, #1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010be:	07da      	lsls	r2, r3, #31
 80010c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010c8:	3b01      	subs	r3, #1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	4403      	add	r3, r0
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e005      	b.n	80010e2 <double_jacobian_default+0x14c>
    } else {
        uECC_vli_rshift1(X1, num_words);
 80010d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010da:	4619      	mov	r1, r3
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fd8f 	bl	8000c00 <uECC_vli_rshift1>
    }
    /* t1 = 3/2*(x1^2 - z1^4) = B */

    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	68f9      	ldr	r1, [r7, #12]
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe14 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	1d19      	adds	r1, r3, #4
 80010f0:	f107 0210 	add.w	r2, r7, #16
 80010f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	460b      	mov	r3, r1
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fdcf 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	1d19      	adds	r1, r3, #4
 8001108:	f107 0210 	add.w	r2, r7, #16
 800110c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	460b      	mov	r3, r1
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fdc3 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	1d1a      	adds	r2, r3, #4
 8001120:	f107 0110 	add.w	r1, r7, #16
 8001124:	f107 0010 	add.w	r0, r7, #16
 8001128:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	f7ff fdb6 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 8001136:	f107 0210 	add.w	r2, r7, #16
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68f9      	ldr	r1, [r7, #12]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fdcc 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	1d19      	adds	r1, r3, #4
 8001148:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800114c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001150:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	460b      	mov	r3, r1
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	f7ff fda2 	bl	8000ca2 <uECC_vli_modSub>

    uECC_vli_set(X1, Z1, num_words);
 800115e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001162:	461a      	mov	r2, r3
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fcb6 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 800116c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001170:	461a      	mov	r2, r3
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fcaf 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 800117a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800117e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001182:	4619      	mov	r1, r3
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f7ff fca7 	bl	8000ad8 <uECC_vli_set>
 800118a:	e000      	b.n	800118e <double_jacobian_default+0x1f8>
        return;
 800118c:	bf00      	nop
}
 800118e:	3758      	adds	r7, #88	; 0x58
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	; 0x40
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2220      	movs	r2, #32
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fd1b 	bl	8002be4 <memset>
 80011ae:	2303      	movs	r3, #3
 80011b0:	617b      	str	r3, [r7, #20]
    wordcount_t num_words = curve->num_words;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff fda8 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	1d19      	adds	r1, r3, #4
 80011c8:	f107 0214 	add.w	r2, r7, #20
 80011cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	460b      	mov	r3, r1
 80011d4:	68f9      	ldr	r1, [r7, #12]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7ff fd63 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	68f9      	ldr	r1, [r7, #12]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff fd7a 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1d19      	adds	r1, r3, #4
 80011f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	460b      	mov	r3, r1
 80011fa:	68f9      	ldr	r1, [r7, #12]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff fd29 	bl	8000c54 <uECC_vli_modAdd>
}
 8001202:	bf00      	nop
 8001204:	3738      	adds	r7, #56	; 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <mod_sqrt_default>:

#if uECC_SUPPORT_COMPRESSED_POINT
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 800120a:	b580      	push	{r7, lr}
 800120c:	b094      	sub	sp, #80	; 0x50
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001218:	2220      	movs	r2, #32
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fce1 	bl	8002be4 <memset>
 8001222:	2301      	movs	r3, #1
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2220      	movs	r2, #32
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fcd8 	bl	8002be4 <memset>
 8001234:	2301      	movs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
    wordcount_t num_words = curve->num_words;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    
    /* When curve->p == 3 (mod 4), we can compute
       sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	1d19      	adds	r1, r3, #4
 8001244:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8001248:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800124c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001250:	f7ff fa96 	bl	8000780 <uECC_vli_add>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8001254:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8001258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc00 	bl	8000a64 <uECC_vli_numBits>
 8001264:	4603      	mov	r3, r0
 8001266:	b29b      	uxth	r3, r3
 8001268:	3b01      	subs	r3, #1
 800126a:	b29b      	uxth	r3, r3
 800126c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001270:	e020      	b.n	80012b4 <mod_sqrt_default+0xaa>
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 8001272:	f107 010c 	add.w	r1, r7, #12
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fd49 	bl	8000d14 <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 8001282:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8001286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fba9 	bl	80009e4 <uECC_vli_testBit>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <mod_sqrt_default+0x9e>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 8001298:	f107 010c 	add.w	r1, r7, #12
 800129c:	f107 000c 	add.w	r0, r7, #12
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	f7ff fd1a 	bl	8000cdc <uECC_vli_modMult_fast>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 80012a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80012b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	dcda      	bgt.n	8001272 <mod_sqrt_default+0x68>
        }
    }
    uECC_vli_set(a, l_result, num_words);
 80012bc:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fc06 	bl	8000ad8 <uECC_vli_set>
}
 80012cc:	bf00      	nop
 80012ce:	3750      	adds	r7, #80	; 0x50
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <uECC_secp160r1>:
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp160r1
#endif
};

uECC_Curve uECC_secp160r1(void) { return &curve_secp160r1; }
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <uECC_secp160r1+0x10>)
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	08002c64 	.word	0x08002c64

080012e8 <vli_mmod_fast_secp160r1>:
        carry = (tmp >> 33) + (result[i] < tmp || (carry && result[i] == tmp));
    }
    result[i] = carry;
}
#else
static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    uECC_word_t tmp[2 * num_words_secp160r1];
    uECC_word_t carry;
    
    uECC_vli_clear(tmp, num_words_secp160r1);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2105      	movs	r1, #5
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fb28 	bl	800094e <uECC_vli_clear>
    uECC_vli_clear(tmp + num_words_secp160r1, num_words_secp160r1);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	3314      	adds	r3, #20
 8001304:	2105      	movs	r1, #5
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb21 	bl	800094e <uECC_vli_clear>

    omega_mult_secp160r1(tmp, product + num_words_secp160r1); /* (Rq, q) = q * c */
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	f103 0214 	add.w	r2, r3, #20
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f83f 	bl	800139c <omega_mult_secp160r1>
    
    carry = uECC_vli_add(result, product, tmp, num_words_secp160r1); /* (C, r) = r + q */
 800131e:	f107 020c 	add.w	r2, r7, #12
 8001322:	2305      	movs	r3, #5
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fa2a 	bl	8000780 <uECC_vli_add>
 800132c:	6378      	str	r0, [r7, #52]	; 0x34
    uECC_vli_clear(product, num_words_secp160r1);
 800132e:	2105      	movs	r1, #5
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f7ff fb0c 	bl	800094e <uECC_vli_clear>
    omega_mult_secp160r1(product, tmp + num_words_secp160r1); /* Rq*c */
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	3314      	adds	r3, #20
 800133c:	4619      	mov	r1, r3
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f000 f82c 	bl	800139c <omega_mult_secp160r1>
    carry += uECC_vli_add(result, result, product, num_words_secp160r1); /* (C1, r) = r + Rq*c */
 8001344:	2305      	movs	r3, #5
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fa18 	bl	8000780 <uECC_vli_add>
 8001350:	4602      	mov	r2, r0
 8001352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001354:	4413      	add	r3, r2
 8001356:	637b      	str	r3, [r7, #52]	; 0x34

    while (carry > 0) {
 8001358:	e008      	b.n	800136c <vli_mmod_fast_secp160r1+0x84>
        --carry;
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	3b01      	subs	r3, #1
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
        uECC_vli_sub(result, result, curve_secp160r1.p, num_words_secp160r1);
 8001360:	2305      	movs	r3, #5
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <vli_mmod_fast_secp160r1+0xb0>)
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fa52 	bl	8000810 <uECC_vli_sub>
    while (carry > 0) {
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f3      	bne.n	800135a <vli_mmod_fast_secp160r1+0x72>
    }
    if (uECC_vli_cmp_unsafe(result, curve_secp160r1.p, num_words_secp160r1) > 0) {
 8001372:	2205      	movs	r2, #5
 8001374:	4908      	ldr	r1, [pc, #32]	; (8001398 <vli_mmod_fast_secp160r1+0xb0>)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fbd5 	bl	8000b26 <uECC_vli_cmp_unsafe>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	dd05      	ble.n	800138e <vli_mmod_fast_secp160r1+0xa6>
        uECC_vli_sub(result, result, curve_secp160r1.p, num_words_secp160r1);
 8001382:	2305      	movs	r3, #5
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <vli_mmod_fast_secp160r1+0xb0>)
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fa41 	bl	8000810 <uECC_vli_sub>
    }
}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	08002c68 	.word	0x08002c68

0800139c <omega_mult_secp160r1>:
        result[i] = (uint8_t)sum;
        carry = sum >> 8;
    }
}
#elif uECC_WORD_SIZE == 4
static void omega_mult_secp160r1(uint32_t *result, const uint32_t *right) {
 800139c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
    uint32_t carry;
    unsigned i;
    
    /* Multiply by (2^31 + 1). */
    uECC_vli_set(result + 1, right, num_words_secp160r1); /* 2^32 */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	2205      	movs	r2, #5
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fb91 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_rshift1(result + 1, num_words_secp160r1); /* 2^31 */
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2105      	movs	r1, #5
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fc1f 	bl	8000c00 <uECC_vli_rshift1>
    result[0] = right[0] << 31; /* get last bit from shift */
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	07da      	lsls	r2, r3, #31
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	601a      	str	r2, [r3, #0]
    
    carry = uECC_vli_add(result, result, right, num_words_secp160r1); /* 2^31 + 1 */
 80013cc:	2305      	movs	r3, #5
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff f9d4 	bl	8000780 <uECC_vli_add>
 80013d8:	6178      	str	r0, [r7, #20]
    for (i = num_words_secp160r1; carry; ++i) {
 80013da:	2305      	movs	r3, #5
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	e024      	b.n	800142a <omega_mult_secp160r1+0x8e>
        uint64_t sum = (uint64_t)result[i] + carry;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	461c      	mov	r4, r3
 80013ee:	4615      	mov	r5, r2
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2200      	movs	r2, #0
 80013f4:	4698      	mov	r8, r3
 80013f6:	4691      	mov	r9, r2
 80013f8:	eb14 0a08 	adds.w	sl, r4, r8
 80013fc:	eb45 0b09 	adc.w	fp, r5, r9
 8001400:	e9c7 ab02 	strd	sl, fp, [r7, #8]
        result[i] = (uint32_t)sum;
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	601a      	str	r2, [r3, #0]
        carry = sum >> 32;
 8001410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	000a      	movs	r2, r1
 800141e:	2300      	movs	r3, #0
 8001420:	4613      	mov	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
    for (i = num_words_secp160r1; carry; ++i) {
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	3301      	adds	r3, #1
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1d7      	bne.n	80013e0 <omega_mult_secp160r1+0x44>
    }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800143c <apply_z>:

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * X1,
                    uECC_word_t * Y1,
                    const uECC_word_t * const Z,
                    uECC_Curve curve) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
    uECC_word_t t1[uECC_MAX_WORDS];

    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fc5e 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8001458:	f107 0210 	add.w	r2, r7, #16
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68f9      	ldr	r1, [r7, #12]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff fc3b 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8001466:	f107 0110 	add.w	r1, r7, #16
 800146a:	f107 0010 	add.w	r0, r7, #16
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	f7ff fc33 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8001476:	f107 0210 	add.w	r2, r7, #16
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f7ff fc2c 	bl	8000cdc <uECC_vli_modMult_fast>
}
 8001484:	bf00      	nop
 8001486:	3730      	adds	r7, #48	; 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <XYcZ_initial_double>:
static void XYcZ_initial_double(uECC_word_t * X1,
                                uECC_word_t * Y1,
                                uECC_word_t * X2,
                                uECC_word_t * Y2,
                                const uECC_word_t * const initial_Z,
                                uECC_Curve curve) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b08f      	sub	sp, #60	; 0x3c
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
    uECC_word_t z[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (initial_Z) {
 80014a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <XYcZ_initial_double+0x2e>
        uECC_vli_set(z, initial_Z, num_words);
 80014a8:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb10 	bl	8000ad8 <uECC_vli_set>
 80014b8:	e009      	b.n	80014ce <XYcZ_initial_double+0x42>
    } else {
        uECC_vli_clear(z, num_words);
 80014ba:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fa42 	bl	800094e <uECC_vli_clear>
        z[0] = 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
    }

    uECC_vli_set(X2, X1, num_words);
 80014ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80014d2:	461a      	mov	r2, r3
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fafe 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_set(Y2, Y1, num_words);
 80014dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80014e0:	461a      	mov	r2, r3
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	6838      	ldr	r0, [r7, #0]
 80014e6:	f7ff faf7 	bl	8000ad8 <uECC_vli_set>

    apply_z(X1, Y1, z, curve);
 80014ea:	f107 0214 	add.w	r2, r7, #20
 80014ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f7ff ffa2 	bl	800143c <apply_z>
    curve->double_jacobian(X1, Y1, z, curve);
 80014f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fa:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 80014fe:	f107 0214 	add.w	r2, r7, #20
 8001502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	47a0      	blx	r4
    apply_z(X2, Y2, z, curve);
 800150a:	f107 0214 	add.w	r2, r7, #20
 800150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff92 	bl	800143c <apply_z>
}
 8001518:	bf00      	nop
 800151a:	373c      	adds	r7, #60	; 0x3c
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <XYcZ_add>:
*/
static void XYcZ_add(uECC_word_t * X1,
                     uECC_word_t * Y1,
                     uECC_word_t * X2,
                     uECC_word_t * Y2,
                     uECC_Curve curve) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	; 0x40
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 800152e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8001536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001538:	1d1a      	adds	r2, r3, #4
 800153a:	f107 0014 	add.w	r0, r7, #20
 800153e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	f7ff fbaa 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 800154e:	f107 0114 	add.w	r1, r7, #20
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fbdb 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 800155e:	f107 0214 	add.w	r2, r7, #20
 8001562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001564:	68f9      	ldr	r1, [r7, #12]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff fbb8 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 800156c:	f107 0214 	add.w	r2, r7, #20
 8001570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fbb1 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 800157a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157c:	1d1a      	adds	r2, r3, #4
 800157e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	6839      	ldr	r1, [r7, #0]
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f7ff fb89 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fbbb 	bl	8000d14 <uECC_vli_modSquare_fast>

    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 800159e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a0:	1d1a      	adds	r2, r3, #4
 80015a2:	f107 0114 	add.w	r1, r7, #20
 80015a6:	f107 0014 	add.w	r0, r7, #20
 80015aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	f7ff fb75 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 80015b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ba:	1d1a      	adds	r2, r3, #4
 80015bc:	f107 0114 	add.w	r1, r7, #20
 80015c0:	f107 0014 	add.w	r0, r7, #20
 80015c4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	4613      	mov	r3, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	f7ff fb68 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80015d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d4:	1d1a      	adds	r2, r3, #4
 80015d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fb5d 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 80015e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	68b8      	ldr	r0, [r7, #8]
 80015f0:	f7ff fb74 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 80015f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f6:	1d19      	adds	r1, r3, #4
 80015f8:	f107 0214 	add.w	r2, r7, #20
 80015fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	460b      	mov	r3, r1
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fb4b 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 800160c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6839      	ldr	r1, [r7, #0]
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f7ff fb62 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8001618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800161a:	1d1a      	adds	r2, r3, #4
 800161c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	6839      	ldr	r1, [r7, #0]
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f7ff fb3a 	bl	8000ca2 <uECC_vli_modSub>

    uECC_vli_set(X2, t5, num_words);
 800162e:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fa4d 	bl	8000ad8 <uECC_vli_set>
}
 800163e:	bf00      	nop
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <XYcZ_addC>:
*/
static void XYcZ_addC(uECC_word_t * X1,
                      uECC_word_t * Y1,
                      uECC_word_t * X2,
                      uECC_word_t * Y2,
                      uECC_Curve curve) {
 8001646:	b590      	push	{r4, r7, lr}
 8001648:	b0a1      	sub	sp, #132	; 0x84
 800164a:	af02      	add	r7, sp, #8
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    uECC_word_t t6[uECC_MAX_WORDS];
    uECC_word_t t7[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 8001654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 800165e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001662:	1d1a      	adds	r2, r3, #4
 8001664:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001668:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f7ff fb15 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 8001678:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800167c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001680:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb45 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 800168a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800168e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7ff fb21 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 800169a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800169e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fb19 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 80016aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016ae:	1d1a      	adds	r2, r3, #4
 80016b0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80016b4:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	f7ff fac8 	bl	8000c54 <uECC_vli_modAdd>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80016c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016c8:	1d1a      	adds	r2, r3, #4
 80016ca:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	6838      	ldr	r0, [r7, #0]
 80016d8:	f7ff fae3 	bl	8000ca2 <uECC_vli_modSub>

    uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 80016dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016e0:	1d1a      	adds	r2, r3, #4
 80016e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80016e6:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	f7ff fad6 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, t6, curve);                /* t2 = y1 * (C - B) = E */
 80016f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	68b8      	ldr	r0, [r7, #8]
 8001702:	f7ff faeb 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8001706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800170a:	1d1a      	adds	r2, r3, #4
 800170c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001710:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68f9      	ldr	r1, [r7, #12]
 800171c:	f7ff fa9a 	bl	8000c54 <uECC_vli_modAdd>
    uECC_vli_modSquare_fast(X2, Y2, curve);                  /* t3 = (y2 - y1)^2 = D */
 8001720:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff faf4 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 800172c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001730:	1d19      	adds	r1, r3, #4
 8001732:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001736:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	460b      	mov	r3, r1
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff faae 	bl	8000ca2 <uECC_vli_modSub>

    uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8001746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800174a:	1d1a      	adds	r2, r3, #4
 800174c:	f107 0014 	add.w	r0, r7, #20
 8001750:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	4613      	mov	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68f9      	ldr	r1, [r7, #12]
 800175c:	f7ff faa1 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, t7, curve);                /* t4 = (y2 - y1)*(B - x3) */
 8001760:	f107 0214 	add.w	r2, r7, #20
 8001764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	f7ff fab6 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */
 8001770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001774:	1d1a      	adds	r2, r3, #4
 8001776:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4613      	mov	r3, r2
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f7ff fa8d 	bl	8000ca2 <uECC_vli_modSub>

    uECC_vli_modSquare_fast(t7, t5, curve);                  /* t7 = (y2 + y1)^2 = F */
 8001788:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fabd 	bl	8000d14 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 800179a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800179e:	1d1c      	adds	r4, r3, #4
 80017a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017a4:	f107 0114 	add.w	r1, r7, #20
 80017a8:	f107 0014 	add.w	r0, r7, #20
 80017ac:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	f7ff fa75 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 80017b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017bc:	1d1a      	adds	r2, r3, #4
 80017be:	f107 0114 	add.w	r1, r7, #20
 80017c2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80017c6:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f7ff fa67 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(t6, t6, t5, curve);                /* t6 = (y2+y1)*(x3' - B) */
 80017d4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80017d8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80017dc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80017e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017e4:	f7ff fa7a 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */
 80017e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017ec:	1d1a      	adds	r2, r3, #4
 80017ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80017f2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f7ff fa50 	bl	8000ca2 <uECC_vli_modSub>

    uECC_vli_set(X1, t7, num_words);
 8001802:	f997 2077 	ldrsb.w	r2, [r7, #119]	; 0x77
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff f963 	bl	8000ad8 <uECC_vli_set>
}
 8001812:	bf00      	nop
 8001814:	377c      	adds	r7, #124	; 0x7c
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}

0800181a <EccPoint_mult>:
static void EccPoint_mult(uECC_word_t * result,
                          const uECC_word_t * point,
                          const uECC_word_t * scalar,
                          const uECC_word_t * initial_Z,
                          bitcount_t num_bits,
                          uECC_Curve curve) {
 800181a:	b590      	push	{r4, r7, lr}
 800181c:	b0b1      	sub	sp, #196	; 0xc4
 800181e:	af02      	add	r7, sp, #8
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
    uECC_word_t Rx[2][uECC_MAX_WORDS];
    uECC_word_t Ry[2][uECC_MAX_WORDS];
    uECC_word_t z[uECC_MAX_WORDS];
    bitcount_t i;
    uECC_word_t nb;
    wordcount_t num_words = curve->num_words;
 8001828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5

    uECC_vli_set(Rx[1], point, num_words);
 8001832:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 8001836:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800183a:	3320      	adds	r3, #32
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f94a 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_set(Ry[1], point + num_words, num_words);
 8001844:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	18d1      	adds	r1, r2, r3
 800184e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 8001852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001856:	3320      	adds	r3, #32
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f93d 	bl	8000ad8 <uECC_vli_set>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 800185e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001862:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186a:	f103 0120 	add.w	r1, r3, #32
 800186e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001872:	f103 0020 	add.w	r0, r3, #32
 8001876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4623      	mov	r3, r4
 8001882:	f7ff fe03 	bl	800148c <XYcZ_initial_double>

    for (i = num_bits - 2; i > 0; --i) {
 8001886:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800188a:	3b02      	subs	r3, #2
 800188c:	b29b      	uxth	r3, r3
 800188e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8001892:	e059      	b.n	8001948 <EccPoint_mult+0x12e>
        nb = !uECC_vli_testBit(scalar, i);
 8001894:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff f8a2 	bl	80009e4 <uECC_vli_testBit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80018b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018b4:	f1c3 0301 	rsb	r3, r3, #1
 80018b8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	18d0      	adds	r0, r2, r3
 80018c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018c4:	f1c3 0301 	rsb	r3, r3, #1
 80018c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018cc:	015b      	lsls	r3, r3, #5
 80018ce:	18d1      	adds	r1, r2, r3
 80018d0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80018d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	18d4      	adds	r4, r2, r3
 80018dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018e4:	015b      	lsls	r3, r3, #5
 80018e6:	441a      	add	r2, r3
 80018e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	4622      	mov	r2, r4
 80018f2:	f7ff fea8 	bl	8001646 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 80018f6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80018fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	18d0      	adds	r0, r2, r3
 8001902:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001906:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800190a:	015b      	lsls	r3, r3, #5
 800190c:	18d1      	adds	r1, r2, r3
 800190e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001912:	f1c3 0301 	rsb	r3, r3, #1
 8001916:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800191a:	015b      	lsls	r3, r3, #5
 800191c:	18d4      	adds	r4, r2, r3
 800191e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001922:	f1c3 0301 	rsb	r3, r3, #1
 8001926:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800192a:	015b      	lsls	r3, r3, #5
 800192c:	441a      	add	r2, r3
 800192e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	4622      	mov	r2, r4
 8001938:	f7ff fdf2 	bl	8001520 <XYcZ_add>
    for (i = num_bits - 2; i > 0; --i) {
 800193c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001940:	3b01      	subs	r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8001948:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800194c:	2b00      	cmp	r3, #0
 800194e:	dca1      	bgt.n	8001894 <EccPoint_mult+0x7a>
    }

    nb = !uECC_vli_testBit(scalar, 0);
 8001950:	2100      	movs	r1, #0
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff f846 	bl	80009e4 <uECC_vli_testBit>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800196c:	f1c3 0301 	rsb	r3, r3, #1
 8001970:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001974:	015b      	lsls	r3, r3, #5
 8001976:	18d0      	adds	r0, r2, r3
 8001978:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800197c:	f1c3 0301 	rsb	r3, r3, #1
 8001980:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001984:	015b      	lsls	r3, r3, #5
 8001986:	18d1      	adds	r1, r2, r3
 8001988:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800198c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	18d4      	adds	r4, r2, r3
 8001994:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001998:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800199c:	015b      	lsls	r3, r3, #5
 800199e:	441a      	add	r2, r3
 80019a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	4613      	mov	r3, r2
 80019a8:	4622      	mov	r2, r4
 80019aa:	f7ff fe4c 	bl	8001646 <XYcZ_addC>

    /* Find final 1/Z value. */
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 80019ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019b2:	1d1c      	adds	r4, r3, #4
 80019b4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80019b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019bc:	f103 0120 	add.w	r1, r3, #32
 80019c0:	f107 0010 	add.w	r0, r7, #16
 80019c4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	4623      	mov	r3, r4
 80019cc:	f7ff f969 	bl	8000ca2 <uECC_vli_modSub>
    uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve);               /* Yb * (X1 - X0) */
 80019d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019d4:	f1c3 0301 	rsb	r3, r3, #1
 80019d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019dc:	015b      	lsls	r3, r3, #5
 80019de:	441a      	add	r2, r3
 80019e0:	f107 0110 	add.w	r1, r7, #16
 80019e4:	f107 0010 	add.w	r0, r7, #16
 80019e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019ec:	f7ff f976 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, point, curve);                    /* xP * Yb * (X1 - X0) */
 80019f0:	f107 0110 	add.w	r1, r7, #16
 80019f4:	f107 0010 	add.w	r0, r7, #16
 80019f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	f7ff f96d 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modInv(z, z, curve->p, num_words);            /* 1 / (xP * Yb * (X1 - X0)) */
 8001a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a06:	1d1a      	adds	r2, r3, #4
 8001a08:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 8001a0c:	f107 0110 	add.w	r1, r7, #16
 8001a10:	f107 0010 	add.w	r0, r7, #16
 8001a14:	f7ff f9c6 	bl	8000da4 <uECC_vli_modInv>
    /* yP / (xP * Yb * (X1 - X0)) */
    uECC_vli_modMult_fast(z, z, point + num_words, curve);
 8001a18:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	441a      	add	r2, r3
 8001a22:	f107 0110 	add.w	r1, r7, #16
 8001a26:	f107 0010 	add.w	r0, r7, #16
 8001a2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a2e:	f7ff f955 	bl	8000cdc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
 8001a32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a36:	f1c3 0301 	rsb	r3, r3, #1
 8001a3a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001a3e:	015b      	lsls	r3, r3, #5
 8001a40:	441a      	add	r2, r3
 8001a42:	f107 0110 	add.w	r1, r7, #16
 8001a46:	f107 0010 	add.w	r0, r7, #16
 8001a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a4e:	f7ff f945 	bl	8000cdc <uECC_vli_modMult_fast>
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8001a52:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	18d0      	adds	r0, r2, r3
 8001a5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	18d1      	adds	r1, r2, r3
 8001a6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a6e:	f1c3 0301 	rsb	r3, r3, #1
 8001a72:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001a76:	015b      	lsls	r3, r3, #5
 8001a78:	18d4      	adds	r4, r2, r3
 8001a7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a7e:	f1c3 0301 	rsb	r3, r3, #1
 8001a82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	441a      	add	r2, r3
 8001a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4613      	mov	r3, r2
 8001a92:	4622      	mov	r2, r4
 8001a94:	f7ff fd44 	bl	8001520 <XYcZ_add>
    apply_z(Rx[0], Ry[0], z, curve);
 8001a98:	f107 0210 	add.w	r2, r7, #16
 8001a9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001aa0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aa8:	f7ff fcc8 	bl	800143c <apply_z>

    uECC_vli_set(result, Rx[0], num_words);
 8001aac:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 8001ab0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff f80e 	bl	8000ad8 <uECC_vli_set>
    uECC_vli_set(result + num_words, Ry[0], num_words);
 8001abc:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 8001aca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f802 	bl	8000ad8 <uECC_vli_set>
}
 8001ad4:	bf00      	nop
 8001ad6:	37bc      	adds	r7, #188	; 0xbc
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}

08001adc <regularize_k>:

static uECC_word_t regularize_k(const uECC_word_t * const k,
                                uECC_word_t *k0,
                                uECC_word_t *k1,
                                uECC_Curve curve) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001af0:	331f      	adds	r3, #31
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da00      	bge.n	8001af8 <regularize_k+0x1c>
 8001af6:	331f      	adds	r3, #31
 8001af8:	115b      	asrs	r3, r3, #5
 8001afa:	75fb      	strb	r3, [r7, #23]
    bitcount_t num_n_bits = curve->num_n_bits;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	885b      	ldrh	r3, [r3, #2]
 8001b00:	82bb      	strh	r3, [r7, #20]
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	68b8      	ldr	r0, [r7, #8]
 8001b10:	f7fe fe36 	bl	8000780 <uECC_vli_add>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10f      	bne.n	8001b3a <regularize_k+0x5e>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8001b1a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b22:	015b      	lsls	r3, r3, #5
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	da0a      	bge.n	8001b3e <regularize_k+0x62>
         uECC_vli_testBit(k0, num_n_bits));
 8001b28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	68b8      	ldr	r0, [r7, #8]
 8001b30:	f7fe ff58 	bl	80009e4 <uECC_vli_testBit>
 8001b34:	4603      	mov	r3, r0
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <regularize_k+0x62>
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <regularize_k+0x64>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
    uECC_vli_add(k1, k0, curve->n, num_n_words);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fe16 	bl	8000780 <uECC_vli_add>
    return carry;
 8001b54:	693b      	ldr	r3, [r7, #16]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <uECC_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
uECC_VLI_API int uECC_generate_random_int(uECC_word_t *random,
                                          const uECC_word_t *top,
                                          wordcount_t num_words) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	71fb      	strb	r3, [r7, #7]
    uECC_word_t mask = (uECC_word_t)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	61bb      	str	r3, [r7, #24]
    uECC_word_t tries;
    bitcount_t num_bits = uECC_vli_numBits(top, num_words);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	68b8      	ldr	r0, [r7, #8]
 8001b7c:	f7fe ff72 	bl	8000a64 <uECC_vli_numBits>
 8001b80:	4603      	mov	r3, r0
 8001b82:	82fb      	strh	r3, [r7, #22]

    if (!g_rng_function) {
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <uECC_generate_random_int+0xd0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <uECC_generate_random_int+0x30>
        return 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e04b      	b.n	8001c28 <uECC_generate_random_int+0xc8>
    }

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	e044      	b.n	8001c20 <uECC_generate_random_int+0xc0>
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <uECC_generate_random_int+0xd0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	4798      	blx	r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <uECC_generate_random_int+0x50>
            return 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e03b      	b.n	8001c28 <uECC_generate_random_int+0xc8>
        }
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	015b      	lsls	r3, r3, #5
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8afb      	ldrh	r3, [r7, #22]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	fa23 f202 	lsr.w	r2, r3, r2
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001be4:	3b01      	subs	r3, #1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	4403      	add	r3, r0
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
        if (!uECC_vli_isZero(random, num_words) &&
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7fe feca 	bl	8000990 <uECC_vli_isZero>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10b      	bne.n	8001c1a <uECC_generate_random_int+0xba>
                uECC_vli_cmp(top, random, num_words) == 1) {
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f7fe ffc7 	bl	8000b9e <uECC_vli_cmp>
 8001c10:	4603      	mov	r3, r0
        if (!uECC_vli_isZero(random, num_words) &&
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <uECC_generate_random_int+0xba>
            return 1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e006      	b.n	8001c28 <uECC_generate_random_int+0xc8>
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b3f      	cmp	r3, #63	; 0x3f
 8001c24:	d9b7      	bls.n	8001b96 <uECC_generate_random_int+0x36>
        }
    }
    return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200000dc 	.word	0x200000dc

08001c34 <EccPoint_compute_public_key>:

static uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
                                               uECC_word_t *private_key,
                                               uECC_Curve curve) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	; 0x68
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
    uECC_word_t tmp1[uECC_MAX_WORDS];
    uECC_word_t tmp2[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
 8001c40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	617b      	str	r3, [r7, #20]
    uECC_word_t *initial_Z = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    uECC_word_t carry;

    /* Regularize the bitcount for the private key so that attackers cannot use a side channel
       attack to learn the number of leading zeros. */
    carry = regularize_k(private_key, tmp1, tmp2, curve);
 8001c50:	f107 0218 	add.w	r2, r7, #24
 8001c54:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68b8      	ldr	r0, [r7, #8]
 8001c5c:	f7ff ff3e 	bl	8001adc <regularize_k>
 8001c60:	65b8      	str	r0, [r7, #88]	; 0x58

    /* If an RNG function was specified, try to get a random initial Z value to improve
       protection against side-channel attacks. */
    if (g_rng_function) {
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <EccPoint_compute_public_key+0xd0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d019      	beq.n	8001c9e <EccPoint_compute_public_key+0x6a>
        if (!uECC_generate_random_int(p2[carry], curve->p, curve->num_words)) {
 8001c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3360      	adds	r3, #96	; 0x60
 8001c70:	443b      	add	r3, r7
 8001c72:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1d19      	adds	r1, r3, #4
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c80:	461a      	mov	r2, r3
 8001c82:	f7ff ff6d 	bl	8001b60 <uECC_generate_random_int>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <EccPoint_compute_public_key+0x5c>
            return 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e034      	b.n	8001cfa <EccPoint_compute_public_key+0xc6>
        }
        initial_Z = p2[carry];
 8001c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	3360      	adds	r3, #96	; 0x60
 8001c96:	443b      	add	r3, r7
 8001c98:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    EccPoint_mult(result, curve->G, p2[!carry], initial_Z, curve->num_n_bits + 1, curve);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	3360      	adds	r3, #96	; 0x60
 8001cb4:	443b      	add	r3, r7
 8001cb6:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff fda1 	bl	800181a <EccPoint_mult>

    if (EccPoint_isZero(result, curve)) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f993 3000 	ldrsb.w	r3, [r3]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7fe fe51 	bl	8000990 <uECC_vli_isZero>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <EccPoint_compute_public_key+0xc4>
        return 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <EccPoint_compute_public_key+0xc6>
    }
    return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3760      	adds	r7, #96	; 0x60
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200000dc 	.word	0x200000dc

08001d08 <uECC_vli_nativeToBytes>:

#else

uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes,
                                         int num_bytes,
                                         const uECC_word_t *native) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < num_bytes; ++i) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e018      	b.n	8001d4c <uECC_vli_nativeToBytes+0x44>
        unsigned b = num_bytes - 1 - i;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	613b      	str	r3, [r7, #16]
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f023 0303 	bic.w	r3, r3, #3
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	fa22 f103 	lsr.w	r1, r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbe2      	blt.n	8001d1a <uECC_vli_nativeToBytes+0x12>
    }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <uECC_vli_bytesToNative>:

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
    int i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3303      	adds	r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	da00      	bge.n	8001d78 <uECC_vli_bytesToNative+0x16>
 8001d76:	3303      	adds	r3, #3
 8001d78:	109b      	asrs	r3, r3, #2
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7fe fde5 	bl	800094e <uECC_vli_clear>
    for (i = 0; i < num_bytes; ++i) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e01e      	b.n	8001dc8 <uECC_vli_bytesToNative+0x66>
        unsigned b = num_bytes - 1 - i;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	613b      	str	r3, [r7, #16]
        native[b / uECC_WORD_SIZE] |=
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f023 0303 	bic.w	r3, r3, #3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	6819      	ldr	r1, [r3, #0]
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	409a      	lsls	r2, r3
        native[b / uECC_WORD_SIZE] |=
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	4403      	add	r3, r0
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbdc      	blt.n	8001d8a <uECC_vli_bytesToNative+0x28>
    }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <uECC_make_key>:

#endif /* uECC_WORD_SIZE */

int uECC_make_key(uint8_t *public_key,
                  uint8_t *private_key,
                  uECC_Curve curve) {
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b09e      	sub	sp, #120	; 0x78
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
    uECC_word_t _private[uECC_MAX_WORDS];
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	677b      	str	r3, [r7, #116]	; 0x74
 8001dea:	e052      	b.n	8001e92 <uECC_make_key+0xb8>
        if (!uECC_generate_random_int(_private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001df8:	331f      	adds	r3, #31
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	da00      	bge.n	8001e00 <uECC_make_key+0x26>
 8001dfe:	331f      	adds	r3, #31
 8001e00:	115b      	asrs	r3, r3, #5
 8001e02:	b25a      	sxtb	r2, r3
 8001e04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fea9 	bl	8001b60 <uECC_generate_random_int>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <uECC_make_key+0x3e>
            return 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e040      	b.n	8001e9a <uECC_make_key+0xc0>
        }

        if (EccPoint_compute_public_key(_public, _private, curve)) {
 8001e18:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff06 	bl	8001c34 <EccPoint_compute_public_key>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02e      	beq.n	8001e8c <uECC_make_key+0xb2>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e34:	3307      	adds	r3, #7
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <uECC_make_key+0x62>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e44:	461a      	mov	r2, r3
 8001e46:	68b8      	ldr	r0, [r7, #8]
 8001e48:	f7ff ff5e 	bl	8001d08 <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e52:	4619      	mov	r1, r3
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff ff54 	bl	8001d08 <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e66:	461a      	mov	r2, r3
            uECC_vli_nativeToBytes(
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1898      	adds	r0, r3, r2
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
            uECC_vli_nativeToBytes(
 8001e72:	4619      	mov	r1, r3
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f993 3000 	ldrsb.w	r3, [r3]
 8001e7a:	009b      	lsls	r3, r3, #2
            uECC_vli_nativeToBytes(
 8001e7c:	f107 0214 	add.w	r2, r7, #20
 8001e80:	4413      	add	r3, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7ff ff40 	bl	8001d08 <uECC_vli_nativeToBytes>
#endif
            return 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e006      	b.n	8001e9a <uECC_make_key+0xc0>
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8001e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8e:	3301      	adds	r3, #1
 8001e90:	677b      	str	r3, [r7, #116]	; 0x74
 8001e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e94:	2b3f      	cmp	r3, #63	; 0x3f
 8001e96:	d9a9      	bls.n	8001dec <uECC_make_key+0x12>
        }
    }
    return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3778      	adds	r7, #120	; 0x78
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key,
                       const uint8_t *private_key,
                       uint8_t *secret,
                       uECC_Curve curve) {
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b0ad      	sub	sp, #180	; 0xb4
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
    uECC_word_t _public[uECC_MAX_WORDS * 2];
    uECC_word_t _private[uECC_MAX_WORDS];

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {_private, tmp};
 8001eb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	61bb      	str	r3, [r7, #24]
    uECC_word_t *initial_Z = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uECC_word_t carry;
    wordcount_t num_words = curve->num_words;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    wordcount_t num_bytes = curve->num_bytes;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) _private, private_key, num_bytes);
    bcopy((uint8_t *) _public, public_key, num_bytes*2);
#else
    uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eda:	3307      	adds	r3, #7
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da00      	bge.n	8001ee2 <uECC_shared_secret+0x3e>
 8001ee0:	3307      	adds	r3, #7
 8001ee2:	10db      	asrs	r3, r3, #3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff38 	bl	8001d62 <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(_public, public_key, num_bytes);
 8001ef2:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 8001ef6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff30 	bl	8001d62 <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(_public + num_words, public_key + num_bytes, num_bytes);
 8001f02:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f0c:	18d0      	adds	r0, r2, r3
 8001f0e:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7ff ff21 	bl	8001d62 <uECC_vli_bytesToNative>
#endif

    /* Regularize the bitcount for the private key so that attackers cannot use a side channel
       attack to learn the number of leading zeros. */
    carry = regularize_k(_private, _private, tmp, curve);
 8001f20:	f107 021c 	add.w	r2, r7, #28
 8001f24:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001f28:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f7ff fdd5 	bl	8001adc <regularize_k>
 8001f32:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* If an RNG function was specified, try to get a random initial Z value to improve
       protection against side-channel attacks. */
    if (g_rng_function) {
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <uECC_shared_secret+0x150>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01b      	beq.n	8001f76 <uECC_shared_secret+0xd2>
        if (!uECC_generate_random_int(p2[carry], curve->p, num_words)) {
 8001f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	33a8      	adds	r3, #168	; 0xa8
 8001f46:	443b      	add	r3, r7
 8001f48:	f853 0c94 	ldr.w	r0, [r3, #-148]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7ff fe03 	bl	8001b60 <uECC_generate_random_int>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <uECC_shared_secret+0xc0>
            return 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e042      	b.n	8001fea <uECC_shared_secret+0x146>
        }
        initial_Z = p2[carry];
 8001f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	33a8      	adds	r3, #168	; 0xa8
 8001f6c:	443b      	add	r3, r7
 8001f6e:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1, curve);
 8001f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	33a8      	adds	r3, #168	; 0xa8
 8001f88:	443b      	add	r3, r7
 8001f8a:	f853 4c94 	ldr.w	r4, [r3, #-148]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001fa0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	9201      	str	r2, [sp, #4]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fae:	4622      	mov	r2, r4
 8001fb0:	f7ff fc33 	bl	800181a <EccPoint_mult>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) secret, (uint8_t *) _public, num_bytes);
#else
    uECC_vli_nativeToBytes(secret, num_bytes, _public);
 8001fb4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 8001fb8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fea2 	bl	8001d08 <uECC_vli_nativeToBytes>
#endif
    return !EccPoint_isZero(_public, curve);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	b25a      	sxtb	r2, r3
 8001fd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fcd9 	bl	8000990 <uECC_vli_isZero>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	37ac      	adds	r7, #172	; 0xac
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200000dc 	.word	0x200000dc

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ffc:	f7fe fbaa 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002002:	490d      	ldr	r1, [pc, #52]	; (8002038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002018:	4c0a      	ldr	r4, [pc, #40]	; (8002044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f000 fde5 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7fe fa57 	bl	80004dc <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800203c:	08002d28 	.word	0x08002d28
  ldr r2, =_sbss
 8002040:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002044:	200000e4 	.word	0x200000e4

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <HAL_Init+0x40>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_Init+0x40>)
 8002062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_Init+0x40>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f000 f90d 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7fe fb16 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f917 	bl	80022e2 <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f8ed 	bl	80022aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008
 8002114:	200000e0 	.word	0x200000e0

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	200000e0 	.word	0x200000e0

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d301      	bcc.n	8002266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <SysTick_Config+0x40>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226e:	210f      	movs	r1, #15
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f7ff ff8e 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <SysTick_Config+0x40>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <SysTick_Config+0x40>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff47 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022bc:	f7ff ff5c 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff ff8e 	bl	80021e8 <NVIC_EncodePriority>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffb0 	bl	8002250 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e267      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b85      	ldr	r3, [pc, #532]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800232e:	2b08      	cmp	r3, #8
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b82      	ldr	r3, [pc, #520]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e242      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x74>
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a75      	ldr	r2, [pc, #468]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b70      	ldr	r3, [pc, #448]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6c      	ldr	r2, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002394:	4b69      	ldr	r3, [pc, #420]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a68      	ldr	r2, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff feb0 	bl	8002118 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff feac 	bl	8002118 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e207      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fe9c 	bl	8002118 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fe98 	bl	8002118 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1f3      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b51      	ldr	r3, [pc, #324]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b44      	ldr	r3, [pc, #272]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1c7      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCC_OscConfig+0x244>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7ff fe51 	bl	8002118 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7ff fe4d 	bl	8002118 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1a8      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4925      	ldr	r1, [pc, #148]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_OscConfig+0x244>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fe30 	bl	8002118 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7ff fe2c 	bl	8002118 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e187      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d036      	beq.n	8002554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_RCC_OscConfig+0x248>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7ff fe10 	bl	8002118 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7ff fe0c 	bl	8002118 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e167      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 800251a:	e01b      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_OscConfig+0x248>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff fdf9 	bl	8002118 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	e00e      	b.n	8002548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252a:	f7ff fdf5 	bl	8002118 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d907      	bls.n	8002548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e150      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800253c:	40023800 	.word	0x40023800
 8002540:	42470000 	.word	0x42470000
 8002544:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ea      	bne.n	800252a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8097 	beq.w	8002690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b7d      	ldr	r3, [pc, #500]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a7c      	ldr	r2, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b7a      	ldr	r3, [pc, #488]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b77      	ldr	r3, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b74      	ldr	r3, [pc, #464]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a73      	ldr	r2, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7ff fdb5 	bl	8002118 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7ff fdb1 	bl	8002118 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e10c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2ea>
 80025d8:	4b64      	ldr	r3, [pc, #400]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a63      	ldr	r2, [pc, #396]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x30c>
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 8002608:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	4b55      	ldr	r3, [pc, #340]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a54      	ldr	r2, [pc, #336]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7ff fd76 	bl	8002118 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7ff fd72 	bl	8002118 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0cb      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCC_OscConfig+0x334>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7ff fd60 	bl	8002118 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7ff fd5c 	bl	8002118 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0b5      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ee      	bne.n	800265c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	4a38      	ldr	r2, [pc, #224]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a1 	beq.w	80027dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d05c      	beq.n	8002760 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d141      	bne.n	8002732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff fd30 	bl	8002118 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff fd2c 	bl	8002118 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e087      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	3b01      	subs	r3, #1
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	491b      	ldr	r1, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff fd05 	bl	8002118 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff fd01 	bl	8002118 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e05c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x416>
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fcee 	bl	8002118 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff fcea 	bl	8002118 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e045      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x444>
 800275e:	e03d      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e038      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d028      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d121      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7ff fc1c 	bl	8002118 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7ff fc18 	bl	8002118 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fb7c 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08002c54 	.word	0x08002c54
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b094      	sub	sp, #80	; 0x50
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d0:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00d      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	f200 80e1 	bhi.w	8002ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ea:	e0db      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f0:	e0db      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f6:	e0d8      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a02:	4b6d      	ldr	r3, [pc, #436]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	2200      	movs	r2, #0
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
 8002a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	f04f 0000 	mov.w	r0, #0
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	0159      	lsls	r1, r3, #5
 8002a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3c:	0150      	lsls	r0, r2, #5
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4621      	mov	r1, r4
 8002a44:	1a51      	subs	r1, r2, r1
 8002a46:	6139      	str	r1, [r7, #16]
 8002a48:	4629      	mov	r1, r5
 8002a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	018b      	lsls	r3, r1, #6
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a66:	4651      	mov	r1, sl
 8002a68:	018a      	lsls	r2, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a70:	4659      	mov	r1, fp
 8002a72:	eb63 0901 	sbc.w	r9, r3, r1
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a8a:	4690      	mov	r8, r2
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	eb18 0303 	adds.w	r3, r8, r3
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	462b      	mov	r3, r5
 8002a98:	eb49 0303 	adc.w	r3, r9, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aaa:	4629      	mov	r1, r5
 8002aac:	024b      	lsls	r3, r1, #9
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	024a      	lsls	r2, r1, #9
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2200      	movs	r2, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac8:	f7fd fb8a 	bl	80001e0 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	e058      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	2200      	movs	r2, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ae6:	623b      	str	r3, [r7, #32]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002af0:	4642      	mov	r2, r8
 8002af2:	464b      	mov	r3, r9
 8002af4:	f04f 0000 	mov.w	r0, #0
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	0159      	lsls	r1, r3, #5
 8002afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b02:	0150      	lsls	r0, r2, #5
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4641      	mov	r1, r8
 8002b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b0e:	4649      	mov	r1, r9
 8002b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b28:	ebb2 040a 	subs.w	r4, r2, sl
 8002b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	00eb      	lsls	r3, r5, #3
 8002b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3e:	00e2      	lsls	r2, r4, #3
 8002b40:	4614      	mov	r4, r2
 8002b42:	461d      	mov	r5, r3
 8002b44:	4643      	mov	r3, r8
 8002b46:	18e3      	adds	r3, r4, r3
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	eb45 0303 	adc.w	r3, r5, r3
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5e:	4629      	mov	r1, r5
 8002b60:	028b      	lsls	r3, r1, #10
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b68:	4621      	mov	r1, r4
 8002b6a:	028a      	lsls	r2, r1, #10
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b72:	2200      	movs	r2, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	61fa      	str	r2, [r7, #28]
 8002b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7c:	f7fd fb30 	bl	80001e0 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4613      	mov	r3, r2
 8002b86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	3301      	adds	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3750      	adds	r7, #80	; 0x50
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	007a1200 	.word	0x007a1200

08002bc4 <memcmp>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	3901      	subs	r1, #1
 8002bc8:	4402      	add	r2, r0
 8002bca:	4290      	cmp	r0, r2
 8002bcc:	d101      	bne.n	8002bd2 <memcmp+0xe>
 8002bce:	2000      	movs	r0, #0
 8002bd0:	e005      	b.n	8002bde <memcmp+0x1a>
 8002bd2:	7803      	ldrb	r3, [r0, #0]
 8002bd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002bd8:	42a3      	cmp	r3, r4
 8002bda:	d001      	beq.n	8002be0 <memcmp+0x1c>
 8002bdc:	1b18      	subs	r0, r3, r4
 8002bde:	bd10      	pop	{r4, pc}
 8002be0:	3001      	adds	r0, #1
 8002be2:	e7f2      	b.n	8002bca <memcmp+0x6>

08002be4 <memset>:
 8002be4:	4402      	add	r2, r0
 8002be6:	4603      	mov	r3, r0
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d100      	bne.n	8002bee <memset+0xa>
 8002bec:	4770      	bx	lr
 8002bee:	f803 1b01 	strb.w	r1, [r3], #1
 8002bf2:	e7f9      	b.n	8002be8 <memset+0x4>

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	4d0d      	ldr	r5, [pc, #52]	; (8002c2c <__libc_init_array+0x38>)
 8002bf8:	4c0d      	ldr	r4, [pc, #52]	; (8002c30 <__libc_init_array+0x3c>)
 8002bfa:	1b64      	subs	r4, r4, r5
 8002bfc:	10a4      	asrs	r4, r4, #2
 8002bfe:	2600      	movs	r6, #0
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	4d0b      	ldr	r5, [pc, #44]	; (8002c34 <__libc_init_array+0x40>)
 8002c06:	4c0c      	ldr	r4, [pc, #48]	; (8002c38 <__libc_init_array+0x44>)
 8002c08:	f000 f818 	bl	8002c3c <_init>
 8002c0c:	1b64      	subs	r4, r4, r5
 8002c0e:	10a4      	asrs	r4, r4, #2
 8002c10:	2600      	movs	r6, #0
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08002d20 	.word	0x08002d20
 8002c30:	08002d20 	.word	0x08002d20
 8002c34:	08002d20 	.word	0x08002d20
 8002c38:	08002d24 	.word	0x08002d24

08002c3c <_init>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr

08002c48 <_fini>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr
