
ECC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d4  080030d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030dc  080030dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080030e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000068  0800314c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  0800314c  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003fa1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011af  00000000  00000000  0002407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000568  00000000  00000000  00025230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003e8  00000000  00000000  00025798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016169  00000000  00000000  00025b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006318  00000000  00000000  0003bce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084edb  00000000  00000000  00042001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d24  00000000  00000000  000c6edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c8c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002f98 	.word	0x08002f98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002f98 	.word	0x08002f98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <bitvec_get_bit>:
/* Private / static functions: */


/* some basic bit-manipulation routines that act on bit-vectors follow */
static int bitvec_get_bit(const bitvec_t x, const uint32_t idx)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  return ((x[idx / 32U] >> (idx & 31U) & 1U));
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	095b      	lsrs	r3, r3, #5
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	f003 031f 	and.w	r3, r3, #31
 8000598:	fa22 f303 	lsr.w	r3, r2, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <bitvec_clr_bit>:

static void bitvec_clr_bit(bitvec_t x, const uint32_t idx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  x[idx / 32U] &= ~(1U << (idx & 31U));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	095b      	lsrs	r3, r3, #5
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	f003 031f 	and.w	r3, r3, #31
 80005c8:	2201      	movs	r2, #1
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43da      	mvns	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	095b      	lsrs	r3, r3, #5
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	4403      	add	r3, r0
 80005da:	400a      	ands	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <bitvec_copy>:

static void bitvec_copy(bitvec_t x, const bitvec_t y)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b085      	sub	sp, #20
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < BITVEC_NWORDS; ++i)
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	e00c      	b.n	8000614 <bitvec_copy+0x2a>
  {
    x[i] = y[i];
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	441a      	add	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	440b      	add	r3, r1
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < BITVEC_NWORDS; ++i)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b05      	cmp	r3, #5
 8000618:	ddef      	ble.n	80005fa <bitvec_copy+0x10>
  }
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <bitvec_swap>:

static void bitvec_swap(bitvec_t x, bitvec_t y)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  bitvec_t tmp;
  bitvec_copy(tmp, x);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffd6 	bl	80005ea <bitvec_copy>
  bitvec_copy(x, y);
 800063e:	6839      	ldr	r1, [r7, #0]
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ffd2 	bl	80005ea <bitvec_copy>
  bitvec_copy(y, tmp);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4619      	mov	r1, r3
 800064c:	6838      	ldr	r0, [r7, #0]
 800064e:	f7ff ffcc 	bl	80005ea <bitvec_copy>
}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <bitvec_equal>:

#if defined(CONST_TIME) && (CONST_TIME == 0)
/* fast version of equality test */
static int bitvec_equal(const bitvec_t x, const bitvec_t y)
{
 800065a:	b480      	push	{r7}
 800065c:	b085      	sub	sp, #20
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < BITVEC_NWORDS; ++i)
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e010      	b.n	800068c <bitvec_equal+0x32>
  {
    if (x[i] != y[i])
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	440b      	add	r3, r1
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	d001      	beq.n	8000686 <bitvec_equal+0x2c>
    {
      return 0;
 8000682:	2300      	movs	r3, #0
 8000684:	e006      	b.n	8000694 <bitvec_equal+0x3a>
  for (i = 0; i < BITVEC_NWORDS; ++i)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b05      	cmp	r3, #5
 8000690:	ddeb      	ble.n	800066a <bitvec_equal+0x10>
    }
  }
  return 1;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <bitvec_set_zero>:
  return ret;
}
#endif

static void bitvec_set_zero(bitvec_t x)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  int i;
  for (i = 0; i < BITVEC_NWORDS; ++i)
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e008      	b.n	80006c0 <bitvec_set_zero+0x20>
  {
    x[i] = 0;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < BITVEC_NWORDS; ++i)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	ddf3      	ble.n	80006ae <bitvec_set_zero+0xe>
  }
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <bitvec_is_zero>:

#if defined(CONST_TIME) && (CONST_TIME == 0)
/* fast implementation */
static int bitvec_is_zero(const bitvec_t x)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  while (i < BITVEC_NWORDS)
 80006e0:	e009      	b.n	80006f6 <bitvec_is_zero+0x22>
  {
    if (x[i] != 0)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <bitvec_is_zero+0x2a>
    {
      break;
    }
    i += 1;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
  while (i < BITVEC_NWORDS)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b05      	cmp	r3, #5
 80006fa:	d9f2      	bls.n	80006e2 <bitvec_is_zero+0xe>
 80006fc:	e000      	b.n	8000700 <bitvec_is_zero+0x2c>
      break;
 80006fe:	bf00      	nop
  }
  return (i == BITVEC_NWORDS);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b06      	cmp	r3, #6
 8000704:	bf0c      	ite	eq
 8000706:	2301      	moveq	r3, #1
 8000708:	2300      	movne	r3, #0
 800070a:	b2db      	uxtb	r3, r3
}
 800070c:	4618      	mov	r0, r3
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <bitvec_degree>:
}
#endif

/* return the number of the highest one-bit + 1 */
static int bitvec_degree(const bitvec_t x)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  int i = BITVEC_NWORDS * 32;
 8000720:	23c0      	movs	r3, #192	; 0xc0
 8000722:	60fb      	str	r3, [r7, #12]

  /* Start at the back of the vector (MSB) */
  x += BITVEC_NWORDS;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	607b      	str	r3, [r7, #4]

  /* Skip empty / zero words */
  while (    (i > 0)
 800072a:	e002      	b.n	8000732 <bitvec_degree+0x1a>
          && (*(--x)) == 0)
  {
    i -= 32;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3b20      	subs	r3, #32
 8000730:	60fb      	str	r3, [r7, #12]
          && (*(--x)) == 0)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd06      	ble.n	8000746 <bitvec_degree+0x2e>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b04      	subs	r3, #4
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f2      	beq.n	800072c <bitvec_degree+0x14>
  }
  /* Run through rest if count is not multiple of bitsize of DTYPE */
  if (i != 0)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00f      	beq.n	800076c <bitvec_degree+0x54>
  {
    uint32_t u32mask = ((uint32_t)1 << 31);
 800074c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000750:	60bb      	str	r3, [r7, #8]
    while (((*x) & u32mask) == 0)
 8000752:	e005      	b.n	8000760 <bitvec_degree+0x48>
    {
      u32mask >>= 1;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	085b      	lsrs	r3, r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
      i -= 1;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3b01      	subs	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
    while (((*x) & u32mask) == 0)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4013      	ands	r3, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f3      	beq.n	8000754 <bitvec_degree+0x3c>
    }
  }
  return i;
 800076c:	68fb      	ldr	r3, [r7, #12]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <bitvec_lshift>:

/* left-shift by 'count' digits */
static void bitvec_lshift(bitvec_t x, const bitvec_t y, int nbits)
{
 800077a:	b480      	push	{r7}
 800077c:	b089      	sub	sp, #36	; 0x24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  int nwords = (nbits / 32);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	da00      	bge.n	800078e <bitvec_lshift+0x14>
 800078c:	331f      	adds	r3, #31
 800078e:	115b      	asrs	r3, r3, #5
 8000790:	613b      	str	r3, [r7, #16]

  /* Shift whole words first if nwords > 0 */
  int i,j;
  for (i = 0; i < nwords; ++i)
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	e008      	b.n	80007aa <bitvec_lshift+0x30>
  {
    /* Zero-initialize from least-significant word until offset reached */
    x[i] = 0;
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nwords; ++i)
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	3301      	adds	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	69fa      	ldr	r2, [r7, #28]
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	dbf2      	blt.n	8000798 <bitvec_lshift+0x1e>
  }
  j = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  /* Copy to x output */
  while (i < BITVEC_NWORDS)
 80007b6:	e00f      	b.n	80007d8 <bitvec_lshift+0x5e>
  {
    x[i] = y[j];
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	441a      	add	r2, r3
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	68f9      	ldr	r1, [r7, #12]
 80007c6:	440b      	add	r3, r1
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	601a      	str	r2, [r3, #0]
    i += 1;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	3301      	adds	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
    j += 1;
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	3301      	adds	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  while (i < BITVEC_NWORDS)
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	2b05      	cmp	r3, #5
 80007dc:	ddec      	ble.n	80007b8 <bitvec_lshift+0x3e>
  }

  /* Shift the rest if count was not multiple of bitsize of DTYPE */
  nbits &= 31;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f003 031f 	and.w	r3, r3, #31
 80007e4:	607b      	str	r3, [r7, #4]
  if (nbits != 0)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d028      	beq.n	800083e <bitvec_lshift+0xc4>
  {
    /* Left shift rest */
    int i;
    for (i = (BITVEC_NWORDS - 1); i > 0; --i)
 80007ec:	2305      	movs	r3, #5
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e01c      	b.n	800082c <bitvec_lshift+0xb2>
    {
      x[i]  = (x[i] << nbits) | (x[i - 1] >> (32 - nbits));
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	fa02 f103 	lsl.w	r1, r2, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000808:	3b01      	subs	r3, #1
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f1c3 0320 	rsb	r3, r3, #32
 8000818:	40da      	lsrs	r2, r3
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	4403      	add	r3, r0
 8000822:	430a      	orrs	r2, r1
 8000824:	601a      	str	r2, [r3, #0]
    for (i = (BITVEC_NWORDS - 1); i > 0; --i)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3b01      	subs	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2b00      	cmp	r3, #0
 8000830:	dcdf      	bgt.n	80007f2 <bitvec_lshift+0x78>
    }
    x[0] <<= nbits;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	409a      	lsls	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	601a      	str	r2, [r3, #0]
  }
}
 800083e:	bf00      	nop
 8000840:	3724      	adds	r7, #36	; 0x24
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <gf2field_set_one>:
*/
/*************************************************************************************************/


static void gf2field_set_one(gf2elem_t x)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  /* Set first word to one */
  x[0] = 1;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
  /* .. and the rest to zero */
  int i;
  for (i = 1; i < BITVEC_NWORDS; ++i)
 8000858:	2301      	movs	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e008      	b.n	8000870 <gf2field_set_one+0x26>
  {
    x[i] = 0;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
  for (i = 1; i < BITVEC_NWORDS; ++i)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b05      	cmp	r3, #5
 8000874:	ddf3      	ble.n	800085e <gf2field_set_one+0x14>
  }
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <gf2field_is_one>:

#if defined(CONST_TIME) && (CONST_TIME == 0)
/* fastest check if x == 1 */
static int gf2field_is_one(const gf2elem_t x) 
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check if first word == 1 */
  if (x[0] != 1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d001      	beq.n	8000898 <gf2field_is_one+0x14>
  {
    return 0;
 8000894:	2300      	movs	r3, #0
 8000896:	e017      	b.n	80008c8 <gf2field_is_one+0x44>
  }
  /* ...and if rest of words == 0 */
  int i;
  for (i = 1; i < BITVEC_NWORDS; ++i)
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e009      	b.n	80008b2 <gf2field_is_one+0x2e>
  {
    if (x[i] != 0)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d106      	bne.n	80008ba <gf2field_is_one+0x36>
  for (i = 1; i < BITVEC_NWORDS; ++i)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	ddf2      	ble.n	800089e <gf2field_is_one+0x1a>
 80008b8:	e000      	b.n	80008bc <gf2field_is_one+0x38>
    {
      break;
 80008ba:	bf00      	nop
    }
  }
  return (i == BITVEC_NWORDS);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <gf2field_add>:
#endif


/* galois field(2^m) addition is modulo 2, so XOR is used instead - 'z := a + b' */
static void gf2field_add(gf2elem_t z, const gf2elem_t x, const gf2elem_t y)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < BITVEC_NWORDS; ++i)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e012      	b.n	800090c <gf2field_add+0x38>
  {
    z[i] = (x[i] ^ y[i]);
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	4413      	add	r3, r2
 80008ee:	6819      	ldr	r1, [r3, #0]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	4413      	add	r3, r2
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	4403      	add	r3, r0
 8000902:	404a      	eors	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
  for (i = 0; i < BITVEC_NWORDS; ++i)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2b05      	cmp	r3, #5
 8000910:	dde9      	ble.n	80008e6 <gf2field_add+0x12>
  }
}
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <gf2field_inc>:

/* increment element */
static void gf2field_inc(gf2elem_t x)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  x[0] ^= 1;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f083 0201 	eor.w	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <gf2field_mul>:


/* field multiplication 'z := (x * y)' */
static void gf2field_mul(gf2elem_t z, const gf2elem_t x, const gf2elem_t y)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  gf2elem_t tmp;
#if defined(CONST_TIME) && (CONST_TIME == 1)
  gf2elem_t blind;
  bitvec_set_zero(blind);
#endif
  assert(z != y);
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	d106      	bne.n	8000962 <gf2field_mul+0x22>
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <gf2field_mul+0xb8>)
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <gf2field_mul+0xbc>)
 8000958:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <gf2field_mul+0xc0>)
 800095e:	f001 fb7b 	bl	8002058 <__assert_func>

  bitvec_copy(tmp, x);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe3e 	bl	80005ea <bitvec_copy>

  /* LSB set? Then start with x */
  if (bitvec_get_bit(y, 0) != 0)
 800096e:	2100      	movs	r1, #0
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff fe03 	bl	800057c <bitvec_get_bit>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d004      	beq.n	8000986 <gf2field_mul+0x46>
  {
    bitvec_copy(z, x);
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff fe33 	bl	80005ea <bitvec_copy>
 8000984:	e002      	b.n	800098c <gf2field_mul+0x4c>
  }
  else /* .. or else start with zero */
  {
    bitvec_set_zero(z);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff fe8a 	bl	80006a0 <bitvec_set_zero>
  }

  /* Then add 2^i * x for the rest */
  for (i = 1; i < CURVE_DEGREE; ++i)
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000990:	e02a      	b.n	80009e8 <gf2field_mul+0xa8>
  {
    /* lshift 1 - doubling the value of tmp */
    bitvec_lshift(tmp, tmp, 1);
 8000992:	f107 0114 	add.w	r1, r7, #20
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2201      	movs	r2, #1
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff feec 	bl	800077a <bitvec_lshift>

    /* Modulo reduction polynomial if degree(tmp) > CURVE_DEGREE */
    if (bitvec_get_bit(tmp, CURVE_DEGREE))
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	21a3      	movs	r1, #163	; 0xa3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fde7 	bl	800057c <bitvec_get_bit>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <gf2field_mul+0x84>
    {
      gf2field_add(tmp, tmp, polynomial);
 80009b4:	f107 0114 	add.w	r1, r7, #20
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <gf2field_mul+0xc4>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff88 	bl	80008d4 <gf2field_add>
      gf2field_add(tmp, tmp, blind);
    }
#endif

    /* Add 2^i * tmp if this factor in y is non-zero */
    if (bitvec_get_bit(y, i))
 80009c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c6:	4619      	mov	r1, r3
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fdd7 	bl	800057c <bitvec_get_bit>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d006      	beq.n	80009e2 <gf2field_mul+0xa2>
    {
      gf2field_add(z, z, tmp);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	461a      	mov	r2, r3
 80009da:	68f9      	ldr	r1, [r7, #12]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff ff79 	bl	80008d4 <gf2field_add>
  for (i = 1; i < CURVE_DEGREE; ++i)
 80009e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e4:	3301      	adds	r3, #1
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ea:	2ba2      	cmp	r3, #162	; 0xa2
 80009ec:	ddd1      	ble.n	8000992 <gf2field_mul+0x52>
    {
      gf2field_add(z, z, blind);
    }
#endif
  }
}
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	08002fb0 	.word	0x08002fb0
 80009fc:	08003044 	.word	0x08003044
 8000a00:	08002fb8 	.word	0x08002fb8
 8000a04:	08002fcc 	.word	0x08002fcc

08000a08 <gf2field_inv>:

/* field inversion 'z := 1/x' */
static void gf2field_inv(gf2elem_t z, const gf2elem_t x)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b09d      	sub	sp, #116	; 0x74
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  gf2elem_t u, v, g, h;
  int i;

  bitvec_copy(u, x);
 8000a12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fde6 	bl	80005ea <bitvec_copy>
  bitvec_copy(v, polynomial);
 8000a1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a22:	492e      	ldr	r1, [pc, #184]	; (8000adc <gf2field_inv+0xd4>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fde0 	bl	80005ea <bitvec_copy>
  bitvec_set_zero(g);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe36 	bl	80006a0 <bitvec_set_zero>
  gf2field_set_one(z);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff08 	bl	800084a <gf2field_set_one>
  
  while (!gf2field_is_one(u))
 8000a3a:	e041      	b.n	8000ac0 <gf2field_inv+0xb8>
  {
    i = (bitvec_degree(u) - bitvec_degree(v));
 8000a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe69 	bl	8000718 <bitvec_degree>
 8000a46:	4604      	mov	r4, r0
 8000a48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe63 	bl	8000718 <bitvec_degree>
 8000a52:	4603      	mov	r3, r0
 8000a54:	1ae3      	subs	r3, r4, r3
 8000a56:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (i < 0)
 8000a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	da10      	bge.n	8000a80 <gf2field_inv+0x78>
    {
      bitvec_swap(u, v);
 8000a5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000a62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fddd 	bl	8000628 <bitvec_swap>
      bitvec_swap(g, z);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fdd7 	bl	8000628 <bitvec_swap>
      i = -i;
 8000a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a7c:	425b      	negs	r3, r3
 8000a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    {
      bitvec_swap(u, v);
      bitvec_swap(v, u);
    }
#endif
    bitvec_lshift(h, v, i);
 8000a80:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe75 	bl	800077a <bitvec_lshift>
    gf2field_add(u, u, h);
 8000a90:	f107 020c 	add.w	r2, r7, #12
 8000a94:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff19 	bl	80008d4 <gf2field_add>
    bitvec_lshift(h, g, i);
 8000aa2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fe64 	bl	800077a <bitvec_lshift>
    gf2field_add(z, z, h);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff0a 	bl	80008d4 <gf2field_add>
  while (!gf2field_is_one(u))
 8000ac0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fedd 	bl	8000884 <gf2field_is_one>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0b5      	beq.n	8000a3c <gf2field_inv+0x34>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3774      	adds	r7, #116	; 0x74
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd90      	pop	{r4, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08002fcc 	.word	0x08002fcc

08000ae0 <gf2point_copy>:
*/
/*************************************************************************************************/


static void gf2point_copy(gf2elem_t x1, gf2elem_t y1, const gf2elem_t x2, const gf2elem_t y2)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
  bitvec_copy(x1, x2);
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff fd7a 	bl	80005ea <bitvec_copy>
  bitvec_copy(y1, y2);
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	68b8      	ldr	r0, [r7, #8]
 8000afa:	f7ff fd76 	bl	80005ea <bitvec_copy>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <gf2point_set_zero>:

static void gf2point_set_zero(gf2elem_t x, gf2elem_t y)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
  bitvec_set_zero(x);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fdc5 	bl	80006a0 <bitvec_set_zero>
  bitvec_set_zero(y);
 8000b16:	6838      	ldr	r0, [r7, #0]
 8000b18:	f7ff fdc2 	bl	80006a0 <bitvec_set_zero>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <gf2point_is_zero>:

static int gf2point_is_zero(const gf2elem_t x, const gf2elem_t y)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  return (    bitvec_is_zero(x)
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fdd0 	bl	80006d4 <bitvec_is_zero>
 8000b34:	4603      	mov	r3, r0
           && bitvec_is_zero(y));
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d007      	beq.n	8000b4a <gf2point_is_zero+0x26>
 8000b3a:	6838      	ldr	r0, [r7, #0]
 8000b3c:	f7ff fdca 	bl	80006d4 <bitvec_is_zero>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <gf2point_is_zero+0x26>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <gf2point_is_zero+0x28>
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <gf2point_double>:

/* double the point (x,y) */
static void gf2point_double(gf2elem_t x, gf2elem_t y)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  /* iff P = O (zero or infinity): 2 * P = P */
  if (bitvec_is_zero(x))
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fdb8 	bl	80006d4 <bitvec_is_zero>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <gf2point_double+0x1e>
  {
    bitvec_set_zero(y);
 8000b6a:	6838      	ldr	r0, [r7, #0]
 8000b6c:	f7ff fd98 	bl	80006a0 <bitvec_set_zero>
#endif
    gf2field_add(x, x, l);
    gf2field_mul(l, l, x);
    gf2field_add(y, y, l);
  }
}
 8000b70:	e03d      	b.n	8000bee <gf2point_double+0x9a>
    gf2field_inv(l, x);
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff45 	bl	8000a08 <gf2field_inv>
    gf2field_mul(l, l, y);
 8000b7e:	f107 0108 	add.w	r1, r7, #8
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fed9 	bl	8000940 <gf2field_mul>
    gf2field_add(l, l, x);
 8000b8e:	f107 0108 	add.w	r1, r7, #8
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe9b 	bl	80008d4 <gf2field_add>
    gf2field_mul(y, x, x);
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f7ff fecc 	bl	8000940 <gf2field_mul>
    gf2field_mul(x, l, l);
 8000ba8:	f107 0208 	add.w	r2, r7, #8
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fec4 	bl	8000940 <gf2field_mul>
    gf2field_inc(l);
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff feaf 	bl	8000920 <gf2field_inc>
    gf2field_add(x, x, l);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fe82 	bl	80008d4 <gf2field_add>
    gf2field_mul(l, l, x);
 8000bd0:	f107 0108 	add.w	r1, r7, #8
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff feb0 	bl	8000940 <gf2field_mul>
    gf2field_add(y, y, l);
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	461a      	mov	r2, r3
 8000be6:	6839      	ldr	r1, [r7, #0]
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f7ff fe73 	bl	80008d4 <gf2field_add>
}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <gf2point_add>:


/* add two points together (x1, y1) := (x1, y1) + (x2, y2) */
static void gf2point_add(gf2elem_t x1, gf2elem_t y1, const gf2elem_t x2, const gf2elem_t y2)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b09c      	sub	sp, #112	; 0x70
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	603b      	str	r3, [r7, #0]
  if (!gf2point_is_zero(x2, y2))
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff8c 	bl	8000b24 <gf2point_is_zero>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 808a 	bne.w	8000d28 <gf2point_add+0x132>
  {
    if (gf2point_is_zero(x1, y1))
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff ff84 	bl	8000b24 <gf2point_is_zero>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d006      	beq.n	8000c30 <gf2point_add+0x3a>
    {
      gf2point_copy(x1, y1, x2, y2);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff ff59 	bl	8000ae0 <gf2point_copy>
        gf2field_add(y1, y1, a);
        bitvec_copy(x1, d);
      }
    }
  }
}
 8000c2e:	e07b      	b.n	8000d28 <gf2point_add+0x132>
      if (bitvec_equal(x1, x2))
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f7ff fd11 	bl	800065a <bitvec_equal>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d010      	beq.n	8000c60 <gf2point_add+0x6a>
        if (bitvec_equal(y1, y2))
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	68b8      	ldr	r0, [r7, #8]
 8000c42:	f7ff fd0a 	bl	800065a <bitvec_equal>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <gf2point_add+0x60>
          gf2point_double(x1, y1);
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff80 	bl	8000b54 <gf2point_double>
}
 8000c54:	e068      	b.n	8000d28 <gf2point_add+0x132>
          gf2point_set_zero(x1, y1);
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ff54 	bl	8000b06 <gf2point_set_zero>
}
 8000c5e:	e063      	b.n	8000d28 <gf2point_add+0x132>
        gf2field_add(a, y1, y2);
 8000c60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe33 	bl	80008d4 <gf2field_add>
        gf2field_add(b, x1, x2);
 8000c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68f9      	ldr	r1, [r7, #12]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fe2c 	bl	80008d4 <gf2field_add>
        gf2field_inv(c, b);
 8000c7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff febe 	bl	8000a08 <gf2field_inv>
        gf2field_mul(c, c, a);
 8000c8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c90:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fe51 	bl	8000940 <gf2field_mul>
        gf2field_mul(d, c, c);
 8000c9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ca2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fe48 	bl	8000940 <gf2field_mul>
        gf2field_add(d, d, c);
 8000cb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cb4:	f107 0110 	add.w	r1, r7, #16
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe09 	bl	80008d4 <gf2field_add>
        gf2field_add(d, d, b);
 8000cc2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000cc6:	f107 0110 	add.w	r1, r7, #16
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe00 	bl	80008d4 <gf2field_add>
        gf2field_inc(d);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe21 	bl	8000920 <gf2field_inc>
        gf2field_add(x1, x1, d);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68f9      	ldr	r1, [r7, #12]
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff fdf4 	bl	80008d4 <gf2field_add>
        gf2field_mul(a, x1, c);
 8000cec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cf4:	68f9      	ldr	r1, [r7, #12]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe22 	bl	8000940 <gf2field_mul>
        gf2field_add(a, a, d);
 8000cfc:	f107 0210 	add.w	r2, r7, #16
 8000d00:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000d04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fde3 	bl	80008d4 <gf2field_add>
        gf2field_add(y1, y1, a);
 8000d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d12:	461a      	mov	r2, r3
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f7ff fddc 	bl	80008d4 <gf2field_add>
        bitvec_copy(x1, d);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff fc61 	bl	80005ea <bitvec_copy>
}
 8000d28:	bf00      	nop
 8000d2a:	3770      	adds	r7, #112	; 0x70
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <gf2point_mul>:


#if defined(CONST_TIME) && (CONST_TIME == 0)
/* point multiplication via double-and-add algorithm */
static void gf2point_mul(gf2elem_t x, gf2elem_t y, const scalar_t exp)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b092      	sub	sp, #72	; 0x48
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  gf2elem_t tmpx, tmpy;
  int i;
  int nbits = bitvec_degree(exp);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fceb 	bl	8000718 <bitvec_degree>
 8000d42:	6438      	str	r0, [r7, #64]	; 0x40

  gf2point_set_zero(tmpx, tmpy);
 8000d44:	f107 0210 	add.w	r2, r7, #16
 8000d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed9 	bl	8000b06 <gf2point_set_zero>

  for (i = (nbits - 1); i >= 0; --i)
 8000d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d56:	3b01      	subs	r3, #1
 8000d58:	647b      	str	r3, [r7, #68]	; 0x44
 8000d5a:	e01a      	b.n	8000d92 <gf2point_mul+0x62>
  {
    gf2point_double(tmpx, tmpy);
 8000d5c:	f107 0210 	add.w	r2, r7, #16
 8000d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fef4 	bl	8000b54 <gf2point_double>
    if (bitvec_get_bit(exp, i))
 8000d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d6e:	4619      	mov	r1, r3
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fc03 	bl	800057c <bitvec_get_bit>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <gf2point_mul+0x5c>
    {
      gf2point_add(tmpx, tmpy, x, y);
 8000d7c:	f107 0110 	add.w	r1, r7, #16
 8000d80:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	f7ff ff35 	bl	8000bf6 <gf2point_add>
  for (i = (nbits - 1); i >= 0; --i)
 8000d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	647b      	str	r3, [r7, #68]	; 0x44
 8000d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	dae1      	bge.n	8000d5c <gf2point_mul+0x2c>
    }
  }
  gf2point_copy(x, y, tmpx, tmpy);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff fe9c 	bl	8000ae0 <gf2point_copy>
}
 8000da8:	bf00      	nop
 8000daa:	3748      	adds	r7, #72	; 0x48
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <gf2point_on_curve>:



/* check if y^2 + x*y = x^3 + a*x^2 + coeff_b holds */
static int gf2point_on_curve(const gf2elem_t x, const gf2elem_t y)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  gf2elem_t a, b;

  if (gf2point_is_zero(x, y))
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff feb1 	bl	8000b24 <gf2point_is_zero>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <gf2point_on_curve+0x1c>
  {
    return 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e03f      	b.n	8000e4c <gf2point_on_curve+0x9c>
  }
  else
  {
    gf2field_mul(a, x, x);
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fdb3 	bl	8000940 <gf2field_mul>
#if (coeff_a == 0)
    gf2field_mul(a, a, x);
#else
    gf2field_mul(b, a, x);
 8000dda:	f107 0120 	add.w	r1, r7, #32
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fdab 	bl	8000940 <gf2field_mul>
    gf2field_add(a, a, b);
 8000dea:	f107 0208 	add.w	r2, r7, #8
 8000dee:	f107 0120 	add.w	r1, r7, #32
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fd6c 	bl	80008d4 <gf2field_add>
#endif
    gf2field_add(a, a, coeff_b);
 8000dfc:	f107 0120 	add.w	r1, r7, #32
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <gf2point_on_curve+0xa4>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fd64 	bl	80008d4 <gf2field_add>
    gf2field_mul(b, y, y);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fd93 	bl	8000940 <gf2field_mul>
    gf2field_add(a, a, b);
 8000e1a:	f107 0208 	add.w	r2, r7, #8
 8000e1e:	f107 0120 	add.w	r1, r7, #32
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fd54 	bl	80008d4 <gf2field_add>
    gf2field_mul(b, x, y);
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd83 	bl	8000940 <gf2field_mul>

    return bitvec_equal(a, b);
 8000e3a:	f107 0208 	add.w	r2, r7, #8
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fc08 	bl	800065a <bitvec_equal>
 8000e4a:	4603      	mov	r3, r0
  }
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3738      	adds	r7, #56	; 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	08002fe4 	.word	0x08002fe4

08000e58 <ecdh_generate_keys>:



/* NOTE: private should contain random data a-priori! */
int ecdh_generate_keys(uint8_t* public_key, uint8_t* private_key)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  /* Get copy of "base" point 'G' */
  gf2point_copy((uint32_t*)public_key, (uint32_t*)(public_key + BITVEC_NBYTES), base_x, base_y);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f103 0118 	add.w	r1, r3, #24
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <ecdh_generate_keys+0x68>)
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <ecdh_generate_keys+0x6c>)
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fe37 	bl	8000ae0 <gf2point_copy>

  /* Abort key generation if random number is too small */
  if (bitvec_degree((uint32_t*)private_key) < (CURVE_DEGREE / 2))
 8000e72:	6838      	ldr	r0, [r7, #0]
 8000e74:	f7ff fc50 	bl	8000718 <bitvec_degree>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b50      	cmp	r3, #80	; 0x50
 8000e7c:	dc01      	bgt.n	8000e82 <ecdh_generate_keys+0x2a>
  {
    return 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e01a      	b.n	8000eb8 <ecdh_generate_keys+0x60>
  }
  else
  {
    /* Clear bits > CURVE_DEGREE in highest word to satisfy constraint 1 <= exp < n. */
    int nbits = bitvec_degree(base_order);
 8000e82:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <ecdh_generate_keys+0x70>)
 8000e84:	f7ff fc48 	bl	8000718 <bitvec_degree>
 8000e88:	60b8      	str	r0, [r7, #8]
    int i;

    for (i = (nbits - 1); i < (BITVEC_NWORDS * 32); ++i)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e007      	b.n	8000ea2 <ecdh_generate_keys+0x4a>
    {
      bitvec_clr_bit((uint32_t*)private_key, i);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4619      	mov	r1, r3
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	f7ff fb88 	bl	80005ac <bitvec_clr_bit>
    for (i = (nbits - 1); i < (BITVEC_NWORDS * 32); ++i)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2bbf      	cmp	r3, #191	; 0xbf
 8000ea6:	ddf4      	ble.n	8000e92 <ecdh_generate_keys+0x3a>
    }

    /* Multiply base-point with scalar (private-key) */
    gf2point_mul((uint32_t*)public_key, (uint32_t*)(public_key + BITVEC_NBYTES), (uint32_t*)private_key);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3318      	adds	r3, #24
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff3d 	bl	8000d30 <gf2point_mul>

    return 1;
 8000eb6:	2301      	movs	r3, #1
  }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08003014 	.word	0x08003014
 8000ec4:	08002ffc 	.word	0x08002ffc
 8000ec8:	0800302c 	.word	0x0800302c

08000ecc <ecdh_shared_secret>:



int ecdh_shared_secret(const uint8_t* private_key, const uint8_t* others_pub, uint8_t* output)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  /* Do some basic validation of other party's public key */
  if (    !gf2point_is_zero ((uint32_t*)others_pub, (uint32_t*)(others_pub + BITVEC_NBYTES))
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3318      	adds	r3, #24
 8000edc:	4619      	mov	r1, r3
 8000ede:	68b8      	ldr	r0, [r7, #8]
 8000ee0:	f7ff fe20 	bl	8000b24 <gf2point_is_zero>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d122      	bne.n	8000f30 <ecdh_shared_secret+0x64>
       &&  gf2point_on_curve((uint32_t*)others_pub, (uint32_t*)(others_pub + BITVEC_NBYTES)) )
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3318      	adds	r3, #24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	68b8      	ldr	r0, [r7, #8]
 8000ef2:	f7ff ff5d 	bl	8000db0 <gf2point_on_curve>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d019      	beq.n	8000f30 <ecdh_shared_secret+0x64>
  {
    /* Copy other side's public key to output */
    unsigned int i;
    for (i = 0; i < (BITVEC_NBYTES * 2); ++i)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <ecdh_shared_secret+0x4c>
    {
      output[i] = others_pub[i];
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	441a      	add	r2, r3
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	440b      	add	r3, r1
 8000f0e:	7812      	ldrb	r2, [r2, #0]
 8000f10:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (BITVEC_NBYTES * 2); ++i)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f1c:	d9f1      	bls.n	8000f02 <ecdh_shared_secret+0x36>
    }

    /* Multiply other side's public key with own private key */
    gf2point_mul((uint32_t*)output,(uint32_t*)(output + BITVEC_NBYTES), (const uint32_t*)private_key);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3318      	adds	r3, #24
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff02 	bl	8000d30 <gf2point_mul>
    gf2point_double((uint32_t*)output, (uint32_t*)(output + BITVEC_NBYTES));
    gf2point_double((uint32_t*)output, (uint32_t*)(output + BITVEC_NBYTES));
 #endif
#endif
    
    return 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <ecdh_shared_secret+0x66>
  }
  else
  {
    return 0;
 8000f30:	2300      	movs	r3, #0
  }
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <prng_rotate>:

static prng_t prng_ctx;

//Ror in C
static uint32_t prng_rotate(uint32_t x, uint32_t k)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
  return (x << k) | (x >> (32 - k));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f1c3 0320 	rsb	r3, r3, #32
 8000f4c:	fa62 f303 	ror.w	r3, r2, r3
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <prng_next>:

//Obtain a random uint32_t from the random number allocated in memory
static uint32_t prng_next(void)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  uint32_t e = prng_ctx.a - prng_rotate(prng_ctx.b, 27);
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <prng_next+0x68>)
 8000f64:	681c      	ldr	r4, [r3, #0]
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <prng_next+0x68>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	211b      	movs	r1, #27
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ffe4 	bl	8000f3a <prng_rotate>
 8000f72:	4603      	mov	r3, r0
 8000f74:	1ae3      	subs	r3, r4, r3
 8000f76:	607b      	str	r3, [r7, #4]
  prng_ctx.a = prng_ctx.b ^ prng_rotate(prng_ctx.c, 17);
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <prng_next+0x68>)
 8000f7a:	685c      	ldr	r4, [r3, #4]
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <prng_next+0x68>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2111      	movs	r1, #17
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffd9 	bl	8000f3a <prng_rotate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4063      	eors	r3, r4
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <prng_next+0x68>)
 8000f8e:	6013      	str	r3, [r2, #0]
  prng_ctx.b = prng_ctx.c + prng_ctx.d;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <prng_next+0x68>)
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <prng_next+0x68>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <prng_next+0x68>)
 8000f9c:	6053      	str	r3, [r2, #4]
  prng_ctx.c = prng_ctx.d + e;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <prng_next+0x68>)
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <prng_next+0x68>)
 8000fa8:	6093      	str	r3, [r2, #8]
  prng_ctx.d = e + prng_ctx.a;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <prng_next+0x68>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <prng_next+0x68>)
 8000fb4:	60d3      	str	r3, [r2, #12]
  return prng_ctx.d;
 8000fb6:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <prng_next+0x68>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd90      	pop	{r4, r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000008c 	.word	0x2000008c

08000fc8 <prng_init>:

//Initialize the random number and iterate 31 times to "randomize it"
static void prng_init(uint32_t seed)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t i;
  prng_ctx.a = 0xf1ea5eed;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <prng_init+0x44>)
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <prng_init+0x48>)
 8000fd4:	601a      	str	r2, [r3, #0]
  prng_ctx.b = prng_ctx.c = prng_ctx.d = seed;
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <prng_init+0x44>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	60d3      	str	r3, [r2, #12]
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <prng_init+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <prng_init+0x44>)
 8000fe2:	6093      	str	r3, [r2, #8]
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <prng_init+0x44>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <prng_init+0x44>)
 8000fea:	6053      	str	r3, [r2, #4]

  for (i = 0; i < 31; ++i)
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e004      	b.n	8000ffc <prng_init+0x34>
  {
    (void) prng_next();
 8000ff2:	f7ff ffb3 	bl	8000f5c <prng_next>
  for (i = 0; i < 31; ++i)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b1e      	cmp	r3, #30
 8001000:	d9f7      	bls.n	8000ff2 <prng_init+0x2a>
  }
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000008c 	.word	0x2000008c
 8001010:	f1ea5eed 	.word	0xf1ea5eed

08001014 <ecdh_demo>:




static void ecdh_demo(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  static uint8_t secb[ECC_PUB_KEY_SIZE];
  uint32_t i;

  /* 0. Initialize and seed random number generator */
  static int initialized = 0;
  if (!initialized)
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <ecdh_demo+0x9c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <ecdh_demo+0x1a>
  {
    prng_init((0xbad ^ 0xc0ffee ^ 42) | 0xcafebabe | 666);
 8001022:	4824      	ldr	r0, [pc, #144]	; (80010b4 <ecdh_demo+0xa0>)
 8001024:	f7ff ffd0 	bl	8000fc8 <prng_init>
    initialized = 1;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <ecdh_demo+0x9c>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* 1. Alice picks a (secret) random natural number 'a', calculates P = a * g and sends P to Bob. */
  for (i = 0; i < ECC_PRV_KEY_SIZE; ++i)
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e00b      	b.n	800104c <ecdh_demo+0x38>
  {
    prva[i] = prng_next();
 8001034:	f7ff ff92 	bl	8000f5c <prng_next>
 8001038:	4603      	mov	r3, r0
 800103a:	b2d9      	uxtb	r1, r3
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <ecdh_demo+0xa4>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	460a      	mov	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ECC_PRV_KEY_SIZE; ++i)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3301      	adds	r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b17      	cmp	r3, #23
 8001050:	d9f0      	bls.n	8001034 <ecdh_demo+0x20>
  }
  //assert(ecdh_generate_keys(puba, prva));

  /* 2. Bob picks a (secret) random natural number 'b', calculates Q = b * g and sends Q to Alice. */
  for (i = 0; i < ECC_PRV_KEY_SIZE; ++i)
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e00b      	b.n	8001070 <ecdh_demo+0x5c>
  {
    prvb[i] = prng_next();
 8001058:	f7ff ff80 	bl	8000f5c <prng_next>
 800105c:	4603      	mov	r3, r0
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	4a16      	ldr	r2, [pc, #88]	; (80010bc <ecdh_demo+0xa8>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	460a      	mov	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ECC_PRV_KEY_SIZE; ++i)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3301      	adds	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b17      	cmp	r3, #23
 8001074:	d9f0      	bls.n	8001058 <ecdh_demo+0x44>
  }
  ecdh_generate_keys(pubb, prvb);
 8001076:	4911      	ldr	r1, [pc, #68]	; (80010bc <ecdh_demo+0xa8>)
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <ecdh_demo+0xac>)
 800107a:	f7ff feed 	bl	8000e58 <ecdh_generate_keys>

  /* 3. Alice calculates S = a * Q = a * (b * g). */
  ecdh_shared_secret(prva, pubb, seca);
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <ecdh_demo+0xb0>)
 8001080:	490f      	ldr	r1, [pc, #60]	; (80010c0 <ecdh_demo+0xac>)
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <ecdh_demo+0xa4>)
 8001084:	f7ff ff22 	bl	8000ecc <ecdh_shared_secret>

  /* 4. Bob calculates T = b * P = b * (a * g). */
  ecdh_shared_secret(prvb, puba, secb);
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <ecdh_demo+0xb4>)
 800108a:	4910      	ldr	r1, [pc, #64]	; (80010cc <ecdh_demo+0xb8>)
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <ecdh_demo+0xa8>)
 800108e:	f7ff ff1d 	bl	8000ecc <ecdh_shared_secret>

  /* 5. Assert equality, i.e. check that both parties calculated the same value. */
  for (i = 0; i < ECC_PUB_KEY_SIZE; ++i)
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e002      	b.n	800109e <ecdh_demo+0x8a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b2f      	cmp	r3, #47	; 0x2f
 80010a2:	d9f9      	bls.n	8001098 <ecdh_demo+0x84>
  {
    seca[i] == secb[i];
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	cafefeff 	.word	0xcafefeff
 80010b8:	200000a0 	.word	0x200000a0
 80010bc:	200000b8 	.word	0x200000b8
 80010c0:	200000d0 	.word	0x200000d0
 80010c4:	20000100 	.word	0x20000100
 80010c8:	20000160 	.word	0x20000160
 80010cc:	20000130 	.word	0x20000130

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d6:	f000 fa03 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010da:	f000 f83d 	bl	8001158 <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	int i;
	    int ncycles = 10;
 80010de:	230a      	movs	r3, #10
 80010e0:	60bb      	str	r3, [r7, #8]
	    for (i = 0; i < ncycles; ++i)
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e014      	b.n	8001112 <main+0x42>
	    {
	    	int start=HAL_GetTick();
 80010e8:	f000 fa60 	bl	80015ac <HAL_GetTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	607b      	str	r3, [r7, #4]
	    	ecdh_demo();
 80010f0:	f7ff ff90 	bl	8001014 <ecdh_demo>
	    	int delta=HAL_GetTick()-start;
 80010f4:	f000 fa5a 	bl	80015ac <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	603b      	str	r3, [r7, #0]
	    	avgtime+=delta;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <main+0x7c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <main+0x7c>)
 800110a:	6013      	str	r3, [r2, #0]
	    for (i = 0; i < ncycles; ++i)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	429a      	cmp	r2, r3
 8001118:	dbe6      	blt.n	80010e8 <main+0x18>
	    }
	    seconds=(float)avgtime/1000/ncycles;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <main+0x7c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001150 <main+0x80>
 800112a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <main+0x84>)
 800113e:	edc3 7a00 	vstr	s15, [r3]
	    seconds=0;
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <main+0x84>)
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
  {
 800114a:	e7c8      	b.n	80010de <main+0xe>
 800114c:	20000084 	.word	0x20000084
 8001150:	447a0000 	.word	0x447a0000
 8001154:	20000088 	.word	0x20000088

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	; 0x50
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	2230      	movs	r2, #48	; 0x30
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f8ab 	bl	80022c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <SystemClock_Config+0xcc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <SystemClock_Config+0xcc>)
 8001186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <SystemClock_Config+0xcc>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <SystemClock_Config+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <SystemClock_Config+0xd0>)
 80011a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <SystemClock_Config+0xd0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011bc:	2310      	movs	r3, #16
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011c8:	2308      	movs	r3, #8
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011cc:	23c0      	movs	r3, #192	; 0xc0
 80011ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80011d4:	2308      	movs	r3, #8
 80011d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fad7 	bl	8001790 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011e8:	f000 f820 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2302      	movs	r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2103      	movs	r1, #3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fd38 	bl	8001c80 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001216:	f000 f809 	bl	800122c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	; 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_MspInit+0x4c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x4c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001276:	2007      	movs	r0, #7
 8001278:	f000 fa56 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f956 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_kill>:

int _kill(int pid, int sig)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012f6:	f001 f833 	bl	8002360 <__errno>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2216      	movs	r2, #22
 80012fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_exit>:

void _exit (int status)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ffe7 	bl	80012ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800131e:	e7fe      	b.n	800131e <_exit+0x12>

08001320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001332:	f3af 8000 	nop.w
 8001336:	4601      	mov	r1, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf0      	blt.n	8001332 <_read+0x12>
  }

  return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <_write+0x12>
  }
  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ba:	605a      	str	r2, [r3, #4]
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f000 ff98 	bl	8002360 <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20020000 	.word	0x20020000
 800145c:	00000400 	.word	0x00000400
 8001460:	20000190 	.word	0x20000190
 8001464:	200002e8 	.word	0x200002e8

08001468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001490:	f7ff ffea 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001496:	490d      	ldr	r1, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ac:	4c0a      	ldr	r4, [pc, #40]	; (80014d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ba:	f000 ff57 	bl	800236c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fe07 	bl	80010d0 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014d0:	080030e4 	.word	0x080030e4
  ldr r2, =_sbss
 80014d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014d8:	200002e4 	.word	0x200002e4

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f90d 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fe90 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f917 	bl	8001776 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f8ed 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000194 	.word	0x20000194

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000194 	.word	0x20000194

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff47 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff5c 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb0 	bl	80016e4 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e267      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d075      	beq.n	800189a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017ae:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d00c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ba:	4b85      	ldr	r3, [pc, #532]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d112      	bne.n	80017ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c6:	4b82      	ldr	r3, [pc, #520]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d2:	d10b      	bne.n	80017ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	4b7e      	ldr	r3, [pc, #504]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d05b      	beq.n	8001898 <HAL_RCC_OscConfig+0x108>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d157      	bne.n	8001898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e242      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x74>
 80017f6:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a75      	ldr	r2, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0xb0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x98>
 800180e:	4b70      	ldr	r3, [pc, #448]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6f      	ldr	r2, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b6d      	ldr	r3, [pc, #436]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6c      	ldr	r2, [pc, #432]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0xb0>
 8001828:	4b69      	ldr	r3, [pc, #420]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a68      	ldr	r2, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff feb0 	bl	80015ac <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff feac 	bl	80015ac <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e207      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0xc0>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fe9c 	bl	80015ac <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fe98 	bl	80015ac <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1f3      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	4b51      	ldr	r3, [pc, #324]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0xe8>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d063      	beq.n	800196e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d11c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018be:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x152>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e1c7      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4937      	ldr	r1, [pc, #220]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e03a      	b.n	800196e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCC_OscConfig+0x244>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff fe51 	bl	80015ac <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fe4d 	bl	80015ac <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1a8      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4925      	ldr	r1, [pc, #148]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_OscConfig+0x244>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fe30 	bl	80015ac <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fe2c 	bl	80015ac <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e187      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d036      	beq.n	80019e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d016      	beq.n	80019b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_RCC_OscConfig+0x248>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff fe10 	bl	80015ac <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fe0c 	bl	80015ac <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e167      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x240>)
 80019a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x200>
 80019ae:	e01b      	b.n	80019e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_OscConfig+0x248>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fdf9 	bl	80015ac <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	e00e      	b.n	80019dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fdf5 	bl	80015ac <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d907      	bls.n	80019dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e150      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
 80019d0:	40023800 	.word	0x40023800
 80019d4:	42470000 	.word	0x42470000
 80019d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ea      	bne.n	80019be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8097 	beq.w	8001b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b81      	ldr	r3, [pc, #516]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10f      	bne.n	8001a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a7c      	ldr	r2, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b7a      	ldr	r3, [pc, #488]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b77      	ldr	r3, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x474>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a32:	4b74      	ldr	r3, [pc, #464]	; (8001c04 <HAL_RCC_OscConfig+0x474>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a73      	ldr	r2, [pc, #460]	; (8001c04 <HAL_RCC_OscConfig+0x474>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fdb5 	bl	80015ac <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7ff fdb1 	bl	80015ac <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e10c      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x474>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2ea>
 8001a6c:	4b64      	ldr	r3, [pc, #400]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	4a63      	ldr	r2, [pc, #396]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6713      	str	r3, [r2, #112]	; 0x70
 8001a78:	e01c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x324>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x30c>
 8001a82:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a86:	4a5e      	ldr	r2, [pc, #376]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8e:	4b5c      	ldr	r3, [pc, #368]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	4a5b      	ldr	r2, [pc, #364]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x324>
 8001a9c:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa8:	4b55      	ldr	r3, [pc, #340]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a54      	ldr	r2, [pc, #336]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001aae:	f023 0304 	bic.w	r3, r3, #4
 8001ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d015      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff fd76 	bl	80015ac <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fd72 	bl	80015ac <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e0cb      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0ee      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x334>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fd60 	bl	80015ac <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f7ff fd5c 	bl	80015ac <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e0b5      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1ee      	bne.n	8001af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b18:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a38      	ldr	r2, [pc, #224]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a1 	beq.w	8001c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d05c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d141      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_RCC_OscConfig+0x478>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fd30 	bl	80015ac <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fd2c 	bl	80015ac <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e087      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	019b      	lsls	r3, r3, #6
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	3b01      	subs	r3, #1
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	491b      	ldr	r1, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x478>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fd05 	bl	80015ac <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff fd01 	bl	80015ac <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e05c      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x416>
 8001bc4:	e054      	b.n	8001c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_OscConfig+0x478>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fcee 	bl	80015ac <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff fcea 	bl	80015ac <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e045      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_OscConfig+0x470>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x444>
 8001bf2:	e03d      	b.n	8001c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e038      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000
 8001c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x4ec>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d028      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d121      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d11a      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d111      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	3b01      	subs	r3, #1
 8001c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0cc      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d90c      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b8      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	494d      	ldr	r1, [pc, #308]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d044      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d119      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e07f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e067      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4934      	ldr	r1, [pc, #208]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7ff fc1c 	bl	80015ac <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7ff fc18 	bl	80015ac <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e04f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d20c      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e032      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4916      	ldr	r1, [pc, #88]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	490e      	ldr	r1, [pc, #56]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e06:	f000 f821 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	490a      	ldr	r1, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	5ccb      	ldrb	r3, [r1, r3]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fb7c 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08003054 	.word	0x08003054
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e50:	b094      	sub	sp, #80	; 0x50
 8001e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e64:	4b79      	ldr	r3, [pc, #484]	; (800204c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d00d      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x40>
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	f200 80e1 	bhi.w	8002038 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x34>
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e7e:	e0db      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b73      	ldr	r3, [pc, #460]	; (8002050 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e84:	e0db      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e86:	4b73      	ldr	r3, [pc, #460]	; (8002054 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e8a:	e0d8      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e96:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d063      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	099b      	lsrs	r3, r3, #6
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	f04f 0000 	mov.w	r0, #0
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	0159      	lsls	r1, r3, #5
 8001ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed0:	0150      	lsls	r0, r2, #5
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	1a51      	subs	r1, r2, r1
 8001eda:	6139      	str	r1, [r7, #16]
 8001edc:	4629      	mov	r1, r5
 8001ede:	eb63 0301 	sbc.w	r3, r3, r1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ef0:	4659      	mov	r1, fp
 8001ef2:	018b      	lsls	r3, r1, #6
 8001ef4:	4651      	mov	r1, sl
 8001ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001efa:	4651      	mov	r1, sl
 8001efc:	018a      	lsls	r2, r1, #6
 8001efe:	4651      	mov	r1, sl
 8001f00:	ebb2 0801 	subs.w	r8, r2, r1
 8001f04:	4659      	mov	r1, fp
 8001f06:	eb63 0901 	sbc.w	r9, r3, r1
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f1e:	4690      	mov	r8, r2
 8001f20:	4699      	mov	r9, r3
 8001f22:	4623      	mov	r3, r4
 8001f24:	eb18 0303 	adds.w	r3, r8, r3
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	462b      	mov	r3, r5
 8001f2c:	eb49 0303 	adc.w	r3, r9, r3
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f3e:	4629      	mov	r1, r5
 8001f40:	024b      	lsls	r3, r1, #9
 8001f42:	4621      	mov	r1, r4
 8001f44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f48:	4621      	mov	r1, r4
 8001f4a:	024a      	lsls	r2, r1, #9
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f52:	2200      	movs	r2, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f5c:	f7fe f990 	bl	8000280 <__aeabi_uldivmod>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4613      	mov	r3, r2
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f68:	e058      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	2200      	movs	r2, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	4611      	mov	r1, r2
 8001f76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f84:	4642      	mov	r2, r8
 8001f86:	464b      	mov	r3, r9
 8001f88:	f04f 0000 	mov.w	r0, #0
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	0159      	lsls	r1, r3, #5
 8001f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f96:	0150      	lsls	r0, r2, #5
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4641      	mov	r1, r8
 8001f9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fa2:	4649      	mov	r1, r9
 8001fa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fbc:	ebb2 040a 	subs.w	r4, r2, sl
 8001fc0:	eb63 050b 	sbc.w	r5, r3, fp
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	00eb      	lsls	r3, r5, #3
 8001fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fd2:	00e2      	lsls	r2, r4, #3
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	4643      	mov	r3, r8
 8001fda:	18e3      	adds	r3, r4, r3
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	464b      	mov	r3, r9
 8001fe0:	eb45 0303 	adc.w	r3, r5, r3
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	028b      	lsls	r3, r1, #10
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	028a      	lsls	r2, r1, #10
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002006:	2200      	movs	r2, #0
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	61fa      	str	r2, [r7, #28]
 800200c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002010:	f7fe f936 	bl	8000280 <__aeabi_uldivmod>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4613      	mov	r3, r2
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_GetSysClockFreq+0x200>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	3301      	adds	r3, #1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800202c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800202e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002036:	e002      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetSysClockFreq+0x204>)
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800203c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002040:	4618      	mov	r0, r3
 8002042:	3750      	adds	r7, #80	; 0x50
 8002044:	46bd      	mov	sp, r7
 8002046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	00f42400 	.word	0x00f42400
 8002054:	007a1200 	.word	0x007a1200

08002058 <__assert_func>:
 8002058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800205a:	4614      	mov	r4, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <__assert_func+0x2c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4605      	mov	r5, r0
 8002064:	68d8      	ldr	r0, [r3, #12]
 8002066:	b14c      	cbz	r4, 800207c <__assert_func+0x24>
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <__assert_func+0x30>)
 800206a:	9100      	str	r1, [sp, #0]
 800206c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <__assert_func+0x34>)
 8002072:	462b      	mov	r3, r5
 8002074:	f000 f8b2 	bl	80021dc <fiprintf>
 8002078:	f000 f99f 	bl	80023ba <abort>
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <__assert_func+0x38>)
 800207e:	461c      	mov	r4, r3
 8002080:	e7f3      	b.n	800206a <__assert_func+0x12>
 8002082:	bf00      	nop
 8002084:	20000064 	.word	0x20000064
 8002088:	08003064 	.word	0x08003064
 800208c:	08003071 	.word	0x08003071
 8002090:	0800309f 	.word	0x0800309f

08002094 <std>:
 8002094:	2300      	movs	r3, #0
 8002096:	b510      	push	{r4, lr}
 8002098:	4604      	mov	r4, r0
 800209a:	e9c0 3300 	strd	r3, r3, [r0]
 800209e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020a2:	6083      	str	r3, [r0, #8]
 80020a4:	8181      	strh	r1, [r0, #12]
 80020a6:	6643      	str	r3, [r0, #100]	; 0x64
 80020a8:	81c2      	strh	r2, [r0, #14]
 80020aa:	6183      	str	r3, [r0, #24]
 80020ac:	4619      	mov	r1, r3
 80020ae:	2208      	movs	r2, #8
 80020b0:	305c      	adds	r0, #92	; 0x5c
 80020b2:	f000 f906 	bl	80022c2 <memset>
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <std+0x58>)
 80020b8:	6263      	str	r3, [r4, #36]	; 0x24
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <std+0x5c>)
 80020bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <std+0x60>)
 80020c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <std+0x64>)
 80020c4:	6323      	str	r3, [r4, #48]	; 0x30
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <std+0x68>)
 80020c8:	6224      	str	r4, [r4, #32]
 80020ca:	429c      	cmp	r4, r3
 80020cc:	d006      	beq.n	80020dc <std+0x48>
 80020ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80020d2:	4294      	cmp	r4, r2
 80020d4:	d002      	beq.n	80020dc <std+0x48>
 80020d6:	33d0      	adds	r3, #208	; 0xd0
 80020d8:	429c      	cmp	r4, r3
 80020da:	d105      	bne.n	80020e8 <std+0x54>
 80020dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020e4:	f000 b966 	b.w	80023b4 <__retarget_lock_init_recursive>
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	bf00      	nop
 80020ec:	0800223d 	.word	0x0800223d
 80020f0:	0800225f 	.word	0x0800225f
 80020f4:	08002297 	.word	0x08002297
 80020f8:	080022bb 	.word	0x080022bb
 80020fc:	20000198 	.word	0x20000198

08002100 <stdio_exit_handler>:
 8002100:	4a02      	ldr	r2, [pc, #8]	; (800210c <stdio_exit_handler+0xc>)
 8002102:	4903      	ldr	r1, [pc, #12]	; (8002110 <stdio_exit_handler+0x10>)
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <stdio_exit_handler+0x14>)
 8002106:	f000 b87b 	b.w	8002200 <_fwalk_sglue>
 800210a:	bf00      	nop
 800210c:	2000000c 	.word	0x2000000c
 8002110:	08002c6d 	.word	0x08002c6d
 8002114:	20000018 	.word	0x20000018

08002118 <cleanup_stdio>:
 8002118:	6841      	ldr	r1, [r0, #4]
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <cleanup_stdio+0x34>)
 800211c:	4299      	cmp	r1, r3
 800211e:	b510      	push	{r4, lr}
 8002120:	4604      	mov	r4, r0
 8002122:	d001      	beq.n	8002128 <cleanup_stdio+0x10>
 8002124:	f000 fda2 	bl	8002c6c <_fflush_r>
 8002128:	68a1      	ldr	r1, [r4, #8]
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <cleanup_stdio+0x38>)
 800212c:	4299      	cmp	r1, r3
 800212e:	d002      	beq.n	8002136 <cleanup_stdio+0x1e>
 8002130:	4620      	mov	r0, r4
 8002132:	f000 fd9b 	bl	8002c6c <_fflush_r>
 8002136:	68e1      	ldr	r1, [r4, #12]
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <cleanup_stdio+0x3c>)
 800213a:	4299      	cmp	r1, r3
 800213c:	d004      	beq.n	8002148 <cleanup_stdio+0x30>
 800213e:	4620      	mov	r0, r4
 8002140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002144:	f000 bd92 	b.w	8002c6c <_fflush_r>
 8002148:	bd10      	pop	{r4, pc}
 800214a:	bf00      	nop
 800214c:	20000198 	.word	0x20000198
 8002150:	20000200 	.word	0x20000200
 8002154:	20000268 	.word	0x20000268

08002158 <global_stdio_init.part.0>:
 8002158:	b510      	push	{r4, lr}
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <global_stdio_init.part.0+0x30>)
 800215c:	4c0b      	ldr	r4, [pc, #44]	; (800218c <global_stdio_init.part.0+0x34>)
 800215e:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <global_stdio_init.part.0+0x38>)
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	4620      	mov	r0, r4
 8002164:	2200      	movs	r2, #0
 8002166:	2104      	movs	r1, #4
 8002168:	f7ff ff94 	bl	8002094 <std>
 800216c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002170:	2201      	movs	r2, #1
 8002172:	2109      	movs	r1, #9
 8002174:	f7ff ff8e 	bl	8002094 <std>
 8002178:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800217c:	2202      	movs	r2, #2
 800217e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002182:	2112      	movs	r1, #18
 8002184:	f7ff bf86 	b.w	8002094 <std>
 8002188:	200002d0 	.word	0x200002d0
 800218c:	20000198 	.word	0x20000198
 8002190:	08002101 	.word	0x08002101

08002194 <__sfp_lock_acquire>:
 8002194:	4801      	ldr	r0, [pc, #4]	; (800219c <__sfp_lock_acquire+0x8>)
 8002196:	f000 b90e 	b.w	80023b6 <__retarget_lock_acquire_recursive>
 800219a:	bf00      	nop
 800219c:	200002d9 	.word	0x200002d9

080021a0 <__sfp_lock_release>:
 80021a0:	4801      	ldr	r0, [pc, #4]	; (80021a8 <__sfp_lock_release+0x8>)
 80021a2:	f000 b909 	b.w	80023b8 <__retarget_lock_release_recursive>
 80021a6:	bf00      	nop
 80021a8:	200002d9 	.word	0x200002d9

080021ac <__sinit>:
 80021ac:	b510      	push	{r4, lr}
 80021ae:	4604      	mov	r4, r0
 80021b0:	f7ff fff0 	bl	8002194 <__sfp_lock_acquire>
 80021b4:	6a23      	ldr	r3, [r4, #32]
 80021b6:	b11b      	cbz	r3, 80021c0 <__sinit+0x14>
 80021b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021bc:	f7ff bff0 	b.w	80021a0 <__sfp_lock_release>
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__sinit+0x28>)
 80021c2:	6223      	str	r3, [r4, #32]
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__sinit+0x2c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f5      	bne.n	80021b8 <__sinit+0xc>
 80021cc:	f7ff ffc4 	bl	8002158 <global_stdio_init.part.0>
 80021d0:	e7f2      	b.n	80021b8 <__sinit+0xc>
 80021d2:	bf00      	nop
 80021d4:	08002119 	.word	0x08002119
 80021d8:	200002d0 	.word	0x200002d0

080021dc <fiprintf>:
 80021dc:	b40e      	push	{r1, r2, r3}
 80021de:	b503      	push	{r0, r1, lr}
 80021e0:	4601      	mov	r1, r0
 80021e2:	ab03      	add	r3, sp, #12
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <fiprintf+0x20>)
 80021e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80021ea:	6800      	ldr	r0, [r0, #0]
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	f000 fa0d 	bl	800260c <_vfiprintf_r>
 80021f2:	b002      	add	sp, #8
 80021f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80021f8:	b003      	add	sp, #12
 80021fa:	4770      	bx	lr
 80021fc:	20000064 	.word	0x20000064

08002200 <_fwalk_sglue>:
 8002200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002204:	4607      	mov	r7, r0
 8002206:	4688      	mov	r8, r1
 8002208:	4614      	mov	r4, r2
 800220a:	2600      	movs	r6, #0
 800220c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002210:	f1b9 0901 	subs.w	r9, r9, #1
 8002214:	d505      	bpl.n	8002222 <_fwalk_sglue+0x22>
 8002216:	6824      	ldr	r4, [r4, #0]
 8002218:	2c00      	cmp	r4, #0
 800221a:	d1f7      	bne.n	800220c <_fwalk_sglue+0xc>
 800221c:	4630      	mov	r0, r6
 800221e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002222:	89ab      	ldrh	r3, [r5, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d907      	bls.n	8002238 <_fwalk_sglue+0x38>
 8002228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800222c:	3301      	adds	r3, #1
 800222e:	d003      	beq.n	8002238 <_fwalk_sglue+0x38>
 8002230:	4629      	mov	r1, r5
 8002232:	4638      	mov	r0, r7
 8002234:	47c0      	blx	r8
 8002236:	4306      	orrs	r6, r0
 8002238:	3568      	adds	r5, #104	; 0x68
 800223a:	e7e9      	b.n	8002210 <_fwalk_sglue+0x10>

0800223c <__sread>:
 800223c:	b510      	push	{r4, lr}
 800223e:	460c      	mov	r4, r1
 8002240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002244:	f000 f868 	bl	8002318 <_read_r>
 8002248:	2800      	cmp	r0, #0
 800224a:	bfab      	itete	ge
 800224c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800224e:	89a3      	ldrhlt	r3, [r4, #12]
 8002250:	181b      	addge	r3, r3, r0
 8002252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002256:	bfac      	ite	ge
 8002258:	6563      	strge	r3, [r4, #84]	; 0x54
 800225a:	81a3      	strhlt	r3, [r4, #12]
 800225c:	bd10      	pop	{r4, pc}

0800225e <__swrite>:
 800225e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002262:	461f      	mov	r7, r3
 8002264:	898b      	ldrh	r3, [r1, #12]
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	4605      	mov	r5, r0
 800226a:	460c      	mov	r4, r1
 800226c:	4616      	mov	r6, r2
 800226e:	d505      	bpl.n	800227c <__swrite+0x1e>
 8002270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002274:	2302      	movs	r3, #2
 8002276:	2200      	movs	r2, #0
 8002278:	f000 f83c 	bl	80022f4 <_lseek_r>
 800227c:	89a3      	ldrh	r3, [r4, #12]
 800227e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002286:	81a3      	strh	r3, [r4, #12]
 8002288:	4632      	mov	r2, r6
 800228a:	463b      	mov	r3, r7
 800228c:	4628      	mov	r0, r5
 800228e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002292:	f000 b853 	b.w	800233c <_write_r>

08002296 <__sseek>:
 8002296:	b510      	push	{r4, lr}
 8002298:	460c      	mov	r4, r1
 800229a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800229e:	f000 f829 	bl	80022f4 <_lseek_r>
 80022a2:	1c43      	adds	r3, r0, #1
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	bf15      	itete	ne
 80022a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80022aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022b2:	81a3      	strheq	r3, [r4, #12]
 80022b4:	bf18      	it	ne
 80022b6:	81a3      	strhne	r3, [r4, #12]
 80022b8:	bd10      	pop	{r4, pc}

080022ba <__sclose>:
 80022ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022be:	f000 b809 	b.w	80022d4 <_close_r>

080022c2 <memset>:
 80022c2:	4402      	add	r2, r0
 80022c4:	4603      	mov	r3, r0
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d100      	bne.n	80022cc <memset+0xa>
 80022ca:	4770      	bx	lr
 80022cc:	f803 1b01 	strb.w	r1, [r3], #1
 80022d0:	e7f9      	b.n	80022c6 <memset+0x4>
	...

080022d4 <_close_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4d06      	ldr	r5, [pc, #24]	; (80022f0 <_close_r+0x1c>)
 80022d8:	2300      	movs	r3, #0
 80022da:	4604      	mov	r4, r0
 80022dc:	4608      	mov	r0, r1
 80022de:	602b      	str	r3, [r5, #0]
 80022e0:	f7ff f857 	bl	8001392 <_close>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_close_r+0x1a>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_close_r+0x1a>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	200002d4 	.word	0x200002d4

080022f4 <_lseek_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	4d07      	ldr	r5, [pc, #28]	; (8002314 <_lseek_r+0x20>)
 80022f8:	4604      	mov	r4, r0
 80022fa:	4608      	mov	r0, r1
 80022fc:	4611      	mov	r1, r2
 80022fe:	2200      	movs	r2, #0
 8002300:	602a      	str	r2, [r5, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f7ff f86c 	bl	80013e0 <_lseek>
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	d102      	bne.n	8002312 <_lseek_r+0x1e>
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	b103      	cbz	r3, 8002312 <_lseek_r+0x1e>
 8002310:	6023      	str	r3, [r4, #0]
 8002312:	bd38      	pop	{r3, r4, r5, pc}
 8002314:	200002d4 	.word	0x200002d4

08002318 <_read_r>:
 8002318:	b538      	push	{r3, r4, r5, lr}
 800231a:	4d07      	ldr	r5, [pc, #28]	; (8002338 <_read_r+0x20>)
 800231c:	4604      	mov	r4, r0
 800231e:	4608      	mov	r0, r1
 8002320:	4611      	mov	r1, r2
 8002322:	2200      	movs	r2, #0
 8002324:	602a      	str	r2, [r5, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f7fe fffa 	bl	8001320 <_read>
 800232c:	1c43      	adds	r3, r0, #1
 800232e:	d102      	bne.n	8002336 <_read_r+0x1e>
 8002330:	682b      	ldr	r3, [r5, #0]
 8002332:	b103      	cbz	r3, 8002336 <_read_r+0x1e>
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	bd38      	pop	{r3, r4, r5, pc}
 8002338:	200002d4 	.word	0x200002d4

0800233c <_write_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4d07      	ldr	r5, [pc, #28]	; (800235c <_write_r+0x20>)
 8002340:	4604      	mov	r4, r0
 8002342:	4608      	mov	r0, r1
 8002344:	4611      	mov	r1, r2
 8002346:	2200      	movs	r2, #0
 8002348:	602a      	str	r2, [r5, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	f7ff f805 	bl	800135a <_write>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	d102      	bne.n	800235a <_write_r+0x1e>
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	b103      	cbz	r3, 800235a <_write_r+0x1e>
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	200002d4 	.word	0x200002d4

08002360 <__errno>:
 8002360:	4b01      	ldr	r3, [pc, #4]	; (8002368 <__errno+0x8>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000064 	.word	0x20000064

0800236c <__libc_init_array>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4d0d      	ldr	r5, [pc, #52]	; (80023a4 <__libc_init_array+0x38>)
 8002370:	4c0d      	ldr	r4, [pc, #52]	; (80023a8 <__libc_init_array+0x3c>)
 8002372:	1b64      	subs	r4, r4, r5
 8002374:	10a4      	asrs	r4, r4, #2
 8002376:	2600      	movs	r6, #0
 8002378:	42a6      	cmp	r6, r4
 800237a:	d109      	bne.n	8002390 <__libc_init_array+0x24>
 800237c:	4d0b      	ldr	r5, [pc, #44]	; (80023ac <__libc_init_array+0x40>)
 800237e:	4c0c      	ldr	r4, [pc, #48]	; (80023b0 <__libc_init_array+0x44>)
 8002380:	f000 fe0a 	bl	8002f98 <_init>
 8002384:	1b64      	subs	r4, r4, r5
 8002386:	10a4      	asrs	r4, r4, #2
 8002388:	2600      	movs	r6, #0
 800238a:	42a6      	cmp	r6, r4
 800238c:	d105      	bne.n	800239a <__libc_init_array+0x2e>
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	f855 3b04 	ldr.w	r3, [r5], #4
 8002394:	4798      	blx	r3
 8002396:	3601      	adds	r6, #1
 8002398:	e7ee      	b.n	8002378 <__libc_init_array+0xc>
 800239a:	f855 3b04 	ldr.w	r3, [r5], #4
 800239e:	4798      	blx	r3
 80023a0:	3601      	adds	r6, #1
 80023a2:	e7f2      	b.n	800238a <__libc_init_array+0x1e>
 80023a4:	080030dc 	.word	0x080030dc
 80023a8:	080030dc 	.word	0x080030dc
 80023ac:	080030dc 	.word	0x080030dc
 80023b0:	080030e0 	.word	0x080030e0

080023b4 <__retarget_lock_init_recursive>:
 80023b4:	4770      	bx	lr

080023b6 <__retarget_lock_acquire_recursive>:
 80023b6:	4770      	bx	lr

080023b8 <__retarget_lock_release_recursive>:
 80023b8:	4770      	bx	lr

080023ba <abort>:
 80023ba:	b508      	push	{r3, lr}
 80023bc:	2006      	movs	r0, #6
 80023be:	f000 fd3b 	bl	8002e38 <raise>
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7fe ffa2 	bl	800130c <_exit>

080023c8 <_free_r>:
 80023c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023ca:	2900      	cmp	r1, #0
 80023cc:	d044      	beq.n	8002458 <_free_r+0x90>
 80023ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023d2:	9001      	str	r0, [sp, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f1a1 0404 	sub.w	r4, r1, #4
 80023da:	bfb8      	it	lt
 80023dc:	18e4      	addlt	r4, r4, r3
 80023de:	f000 f8df 	bl	80025a0 <__malloc_lock>
 80023e2:	4a1e      	ldr	r2, [pc, #120]	; (800245c <_free_r+0x94>)
 80023e4:	9801      	ldr	r0, [sp, #4]
 80023e6:	6813      	ldr	r3, [r2, #0]
 80023e8:	b933      	cbnz	r3, 80023f8 <_free_r+0x30>
 80023ea:	6063      	str	r3, [r4, #4]
 80023ec:	6014      	str	r4, [r2, #0]
 80023ee:	b003      	add	sp, #12
 80023f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023f4:	f000 b8da 	b.w	80025ac <__malloc_unlock>
 80023f8:	42a3      	cmp	r3, r4
 80023fa:	d908      	bls.n	800240e <_free_r+0x46>
 80023fc:	6825      	ldr	r5, [r4, #0]
 80023fe:	1961      	adds	r1, r4, r5
 8002400:	428b      	cmp	r3, r1
 8002402:	bf01      	itttt	eq
 8002404:	6819      	ldreq	r1, [r3, #0]
 8002406:	685b      	ldreq	r3, [r3, #4]
 8002408:	1949      	addeq	r1, r1, r5
 800240a:	6021      	streq	r1, [r4, #0]
 800240c:	e7ed      	b.n	80023ea <_free_r+0x22>
 800240e:	461a      	mov	r2, r3
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	b10b      	cbz	r3, 8002418 <_free_r+0x50>
 8002414:	42a3      	cmp	r3, r4
 8002416:	d9fa      	bls.n	800240e <_free_r+0x46>
 8002418:	6811      	ldr	r1, [r2, #0]
 800241a:	1855      	adds	r5, r2, r1
 800241c:	42a5      	cmp	r5, r4
 800241e:	d10b      	bne.n	8002438 <_free_r+0x70>
 8002420:	6824      	ldr	r4, [r4, #0]
 8002422:	4421      	add	r1, r4
 8002424:	1854      	adds	r4, r2, r1
 8002426:	42a3      	cmp	r3, r4
 8002428:	6011      	str	r1, [r2, #0]
 800242a:	d1e0      	bne.n	80023ee <_free_r+0x26>
 800242c:	681c      	ldr	r4, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	6053      	str	r3, [r2, #4]
 8002432:	440c      	add	r4, r1
 8002434:	6014      	str	r4, [r2, #0]
 8002436:	e7da      	b.n	80023ee <_free_r+0x26>
 8002438:	d902      	bls.n	8002440 <_free_r+0x78>
 800243a:	230c      	movs	r3, #12
 800243c:	6003      	str	r3, [r0, #0]
 800243e:	e7d6      	b.n	80023ee <_free_r+0x26>
 8002440:	6825      	ldr	r5, [r4, #0]
 8002442:	1961      	adds	r1, r4, r5
 8002444:	428b      	cmp	r3, r1
 8002446:	bf04      	itt	eq
 8002448:	6819      	ldreq	r1, [r3, #0]
 800244a:	685b      	ldreq	r3, [r3, #4]
 800244c:	6063      	str	r3, [r4, #4]
 800244e:	bf04      	itt	eq
 8002450:	1949      	addeq	r1, r1, r5
 8002452:	6021      	streq	r1, [r4, #0]
 8002454:	6054      	str	r4, [r2, #4]
 8002456:	e7ca      	b.n	80023ee <_free_r+0x26>
 8002458:	b003      	add	sp, #12
 800245a:	bd30      	pop	{r4, r5, pc}
 800245c:	200002dc 	.word	0x200002dc

08002460 <sbrk_aligned>:
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	4e0e      	ldr	r6, [pc, #56]	; (800249c <sbrk_aligned+0x3c>)
 8002464:	460c      	mov	r4, r1
 8002466:	6831      	ldr	r1, [r6, #0]
 8002468:	4605      	mov	r5, r0
 800246a:	b911      	cbnz	r1, 8002472 <sbrk_aligned+0x12>
 800246c:	f000 fd00 	bl	8002e70 <_sbrk_r>
 8002470:	6030      	str	r0, [r6, #0]
 8002472:	4621      	mov	r1, r4
 8002474:	4628      	mov	r0, r5
 8002476:	f000 fcfb 	bl	8002e70 <_sbrk_r>
 800247a:	1c43      	adds	r3, r0, #1
 800247c:	d00a      	beq.n	8002494 <sbrk_aligned+0x34>
 800247e:	1cc4      	adds	r4, r0, #3
 8002480:	f024 0403 	bic.w	r4, r4, #3
 8002484:	42a0      	cmp	r0, r4
 8002486:	d007      	beq.n	8002498 <sbrk_aligned+0x38>
 8002488:	1a21      	subs	r1, r4, r0
 800248a:	4628      	mov	r0, r5
 800248c:	f000 fcf0 	bl	8002e70 <_sbrk_r>
 8002490:	3001      	adds	r0, #1
 8002492:	d101      	bne.n	8002498 <sbrk_aligned+0x38>
 8002494:	f04f 34ff 	mov.w	r4, #4294967295
 8002498:	4620      	mov	r0, r4
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	200002e0 	.word	0x200002e0

080024a0 <_malloc_r>:
 80024a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024a4:	1ccd      	adds	r5, r1, #3
 80024a6:	f025 0503 	bic.w	r5, r5, #3
 80024aa:	3508      	adds	r5, #8
 80024ac:	2d0c      	cmp	r5, #12
 80024ae:	bf38      	it	cc
 80024b0:	250c      	movcc	r5, #12
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	4607      	mov	r7, r0
 80024b6:	db01      	blt.n	80024bc <_malloc_r+0x1c>
 80024b8:	42a9      	cmp	r1, r5
 80024ba:	d905      	bls.n	80024c8 <_malloc_r+0x28>
 80024bc:	230c      	movs	r3, #12
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	2600      	movs	r6, #0
 80024c2:	4630      	mov	r0, r6
 80024c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800259c <_malloc_r+0xfc>
 80024cc:	f000 f868 	bl	80025a0 <__malloc_lock>
 80024d0:	f8d8 3000 	ldr.w	r3, [r8]
 80024d4:	461c      	mov	r4, r3
 80024d6:	bb5c      	cbnz	r4, 8002530 <_malloc_r+0x90>
 80024d8:	4629      	mov	r1, r5
 80024da:	4638      	mov	r0, r7
 80024dc:	f7ff ffc0 	bl	8002460 <sbrk_aligned>
 80024e0:	1c43      	adds	r3, r0, #1
 80024e2:	4604      	mov	r4, r0
 80024e4:	d155      	bne.n	8002592 <_malloc_r+0xf2>
 80024e6:	f8d8 4000 	ldr.w	r4, [r8]
 80024ea:	4626      	mov	r6, r4
 80024ec:	2e00      	cmp	r6, #0
 80024ee:	d145      	bne.n	800257c <_malloc_r+0xdc>
 80024f0:	2c00      	cmp	r4, #0
 80024f2:	d048      	beq.n	8002586 <_malloc_r+0xe6>
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	4631      	mov	r1, r6
 80024f8:	4638      	mov	r0, r7
 80024fa:	eb04 0903 	add.w	r9, r4, r3
 80024fe:	f000 fcb7 	bl	8002e70 <_sbrk_r>
 8002502:	4581      	cmp	r9, r0
 8002504:	d13f      	bne.n	8002586 <_malloc_r+0xe6>
 8002506:	6821      	ldr	r1, [r4, #0]
 8002508:	1a6d      	subs	r5, r5, r1
 800250a:	4629      	mov	r1, r5
 800250c:	4638      	mov	r0, r7
 800250e:	f7ff ffa7 	bl	8002460 <sbrk_aligned>
 8002512:	3001      	adds	r0, #1
 8002514:	d037      	beq.n	8002586 <_malloc_r+0xe6>
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	442b      	add	r3, r5
 800251a:	6023      	str	r3, [r4, #0]
 800251c:	f8d8 3000 	ldr.w	r3, [r8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d038      	beq.n	8002596 <_malloc_r+0xf6>
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	42a2      	cmp	r2, r4
 8002528:	d12b      	bne.n	8002582 <_malloc_r+0xe2>
 800252a:	2200      	movs	r2, #0
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	e00f      	b.n	8002550 <_malloc_r+0xb0>
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	1b52      	subs	r2, r2, r5
 8002534:	d41f      	bmi.n	8002576 <_malloc_r+0xd6>
 8002536:	2a0b      	cmp	r2, #11
 8002538:	d917      	bls.n	800256a <_malloc_r+0xca>
 800253a:	1961      	adds	r1, r4, r5
 800253c:	42a3      	cmp	r3, r4
 800253e:	6025      	str	r5, [r4, #0]
 8002540:	bf18      	it	ne
 8002542:	6059      	strne	r1, [r3, #4]
 8002544:	6863      	ldr	r3, [r4, #4]
 8002546:	bf08      	it	eq
 8002548:	f8c8 1000 	streq.w	r1, [r8]
 800254c:	5162      	str	r2, [r4, r5]
 800254e:	604b      	str	r3, [r1, #4]
 8002550:	4638      	mov	r0, r7
 8002552:	f104 060b 	add.w	r6, r4, #11
 8002556:	f000 f829 	bl	80025ac <__malloc_unlock>
 800255a:	f026 0607 	bic.w	r6, r6, #7
 800255e:	1d23      	adds	r3, r4, #4
 8002560:	1af2      	subs	r2, r6, r3
 8002562:	d0ae      	beq.n	80024c2 <_malloc_r+0x22>
 8002564:	1b9b      	subs	r3, r3, r6
 8002566:	50a3      	str	r3, [r4, r2]
 8002568:	e7ab      	b.n	80024c2 <_malloc_r+0x22>
 800256a:	42a3      	cmp	r3, r4
 800256c:	6862      	ldr	r2, [r4, #4]
 800256e:	d1dd      	bne.n	800252c <_malloc_r+0x8c>
 8002570:	f8c8 2000 	str.w	r2, [r8]
 8002574:	e7ec      	b.n	8002550 <_malloc_r+0xb0>
 8002576:	4623      	mov	r3, r4
 8002578:	6864      	ldr	r4, [r4, #4]
 800257a:	e7ac      	b.n	80024d6 <_malloc_r+0x36>
 800257c:	4634      	mov	r4, r6
 800257e:	6876      	ldr	r6, [r6, #4]
 8002580:	e7b4      	b.n	80024ec <_malloc_r+0x4c>
 8002582:	4613      	mov	r3, r2
 8002584:	e7cc      	b.n	8002520 <_malloc_r+0x80>
 8002586:	230c      	movs	r3, #12
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4638      	mov	r0, r7
 800258c:	f000 f80e 	bl	80025ac <__malloc_unlock>
 8002590:	e797      	b.n	80024c2 <_malloc_r+0x22>
 8002592:	6025      	str	r5, [r4, #0]
 8002594:	e7dc      	b.n	8002550 <_malloc_r+0xb0>
 8002596:	605b      	str	r3, [r3, #4]
 8002598:	deff      	udf	#255	; 0xff
 800259a:	bf00      	nop
 800259c:	200002dc 	.word	0x200002dc

080025a0 <__malloc_lock>:
 80025a0:	4801      	ldr	r0, [pc, #4]	; (80025a8 <__malloc_lock+0x8>)
 80025a2:	f7ff bf08 	b.w	80023b6 <__retarget_lock_acquire_recursive>
 80025a6:	bf00      	nop
 80025a8:	200002d8 	.word	0x200002d8

080025ac <__malloc_unlock>:
 80025ac:	4801      	ldr	r0, [pc, #4]	; (80025b4 <__malloc_unlock+0x8>)
 80025ae:	f7ff bf03 	b.w	80023b8 <__retarget_lock_release_recursive>
 80025b2:	bf00      	nop
 80025b4:	200002d8 	.word	0x200002d8

080025b8 <__sfputc_r>:
 80025b8:	6893      	ldr	r3, [r2, #8]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	b410      	push	{r4}
 80025c0:	6093      	str	r3, [r2, #8]
 80025c2:	da08      	bge.n	80025d6 <__sfputc_r+0x1e>
 80025c4:	6994      	ldr	r4, [r2, #24]
 80025c6:	42a3      	cmp	r3, r4
 80025c8:	db01      	blt.n	80025ce <__sfputc_r+0x16>
 80025ca:	290a      	cmp	r1, #10
 80025cc:	d103      	bne.n	80025d6 <__sfputc_r+0x1e>
 80025ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025d2:	f000 bb73 	b.w	8002cbc <__swbuf_r>
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	1c58      	adds	r0, r3, #1
 80025da:	6010      	str	r0, [r2, #0]
 80025dc:	7019      	strb	r1, [r3, #0]
 80025de:	4608      	mov	r0, r1
 80025e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <__sfputs_r>:
 80025e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e8:	4606      	mov	r6, r0
 80025ea:	460f      	mov	r7, r1
 80025ec:	4614      	mov	r4, r2
 80025ee:	18d5      	adds	r5, r2, r3
 80025f0:	42ac      	cmp	r4, r5
 80025f2:	d101      	bne.n	80025f8 <__sfputs_r+0x12>
 80025f4:	2000      	movs	r0, #0
 80025f6:	e007      	b.n	8002608 <__sfputs_r+0x22>
 80025f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025fc:	463a      	mov	r2, r7
 80025fe:	4630      	mov	r0, r6
 8002600:	f7ff ffda 	bl	80025b8 <__sfputc_r>
 8002604:	1c43      	adds	r3, r0, #1
 8002606:	d1f3      	bne.n	80025f0 <__sfputs_r+0xa>
 8002608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800260c <_vfiprintf_r>:
 800260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002610:	460d      	mov	r5, r1
 8002612:	b09d      	sub	sp, #116	; 0x74
 8002614:	4614      	mov	r4, r2
 8002616:	4698      	mov	r8, r3
 8002618:	4606      	mov	r6, r0
 800261a:	b118      	cbz	r0, 8002624 <_vfiprintf_r+0x18>
 800261c:	6a03      	ldr	r3, [r0, #32]
 800261e:	b90b      	cbnz	r3, 8002624 <_vfiprintf_r+0x18>
 8002620:	f7ff fdc4 	bl	80021ac <__sinit>
 8002624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002626:	07d9      	lsls	r1, r3, #31
 8002628:	d405      	bmi.n	8002636 <_vfiprintf_r+0x2a>
 800262a:	89ab      	ldrh	r3, [r5, #12]
 800262c:	059a      	lsls	r2, r3, #22
 800262e:	d402      	bmi.n	8002636 <_vfiprintf_r+0x2a>
 8002630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002632:	f7ff fec0 	bl	80023b6 <__retarget_lock_acquire_recursive>
 8002636:	89ab      	ldrh	r3, [r5, #12]
 8002638:	071b      	lsls	r3, r3, #28
 800263a:	d501      	bpl.n	8002640 <_vfiprintf_r+0x34>
 800263c:	692b      	ldr	r3, [r5, #16]
 800263e:	b99b      	cbnz	r3, 8002668 <_vfiprintf_r+0x5c>
 8002640:	4629      	mov	r1, r5
 8002642:	4630      	mov	r0, r6
 8002644:	f000 fb78 	bl	8002d38 <__swsetup_r>
 8002648:	b170      	cbz	r0, 8002668 <_vfiprintf_r+0x5c>
 800264a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800264c:	07dc      	lsls	r4, r3, #31
 800264e:	d504      	bpl.n	800265a <_vfiprintf_r+0x4e>
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	b01d      	add	sp, #116	; 0x74
 8002656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800265a:	89ab      	ldrh	r3, [r5, #12]
 800265c:	0598      	lsls	r0, r3, #22
 800265e:	d4f7      	bmi.n	8002650 <_vfiprintf_r+0x44>
 8002660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002662:	f7ff fea9 	bl	80023b8 <__retarget_lock_release_recursive>
 8002666:	e7f3      	b.n	8002650 <_vfiprintf_r+0x44>
 8002668:	2300      	movs	r3, #0
 800266a:	9309      	str	r3, [sp, #36]	; 0x24
 800266c:	2320      	movs	r3, #32
 800266e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002672:	f8cd 800c 	str.w	r8, [sp, #12]
 8002676:	2330      	movs	r3, #48	; 0x30
 8002678:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800282c <_vfiprintf_r+0x220>
 800267c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002680:	f04f 0901 	mov.w	r9, #1
 8002684:	4623      	mov	r3, r4
 8002686:	469a      	mov	sl, r3
 8002688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800268c:	b10a      	cbz	r2, 8002692 <_vfiprintf_r+0x86>
 800268e:	2a25      	cmp	r2, #37	; 0x25
 8002690:	d1f9      	bne.n	8002686 <_vfiprintf_r+0x7a>
 8002692:	ebba 0b04 	subs.w	fp, sl, r4
 8002696:	d00b      	beq.n	80026b0 <_vfiprintf_r+0xa4>
 8002698:	465b      	mov	r3, fp
 800269a:	4622      	mov	r2, r4
 800269c:	4629      	mov	r1, r5
 800269e:	4630      	mov	r0, r6
 80026a0:	f7ff ffa1 	bl	80025e6 <__sfputs_r>
 80026a4:	3001      	adds	r0, #1
 80026a6:	f000 80a9 	beq.w	80027fc <_vfiprintf_r+0x1f0>
 80026aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026ac:	445a      	add	r2, fp
 80026ae:	9209      	str	r2, [sp, #36]	; 0x24
 80026b0:	f89a 3000 	ldrb.w	r3, [sl]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a1 	beq.w	80027fc <_vfiprintf_r+0x1f0>
 80026ba:	2300      	movs	r3, #0
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026c4:	f10a 0a01 	add.w	sl, sl, #1
 80026c8:	9304      	str	r3, [sp, #16]
 80026ca:	9307      	str	r3, [sp, #28]
 80026cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026d0:	931a      	str	r3, [sp, #104]	; 0x68
 80026d2:	4654      	mov	r4, sl
 80026d4:	2205      	movs	r2, #5
 80026d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026da:	4854      	ldr	r0, [pc, #336]	; (800282c <_vfiprintf_r+0x220>)
 80026dc:	f7fd fd80 	bl	80001e0 <memchr>
 80026e0:	9a04      	ldr	r2, [sp, #16]
 80026e2:	b9d8      	cbnz	r0, 800271c <_vfiprintf_r+0x110>
 80026e4:	06d1      	lsls	r1, r2, #27
 80026e6:	bf44      	itt	mi
 80026e8:	2320      	movmi	r3, #32
 80026ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ee:	0713      	lsls	r3, r2, #28
 80026f0:	bf44      	itt	mi
 80026f2:	232b      	movmi	r3, #43	; 0x2b
 80026f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026f8:	f89a 3000 	ldrb.w	r3, [sl]
 80026fc:	2b2a      	cmp	r3, #42	; 0x2a
 80026fe:	d015      	beq.n	800272c <_vfiprintf_r+0x120>
 8002700:	9a07      	ldr	r2, [sp, #28]
 8002702:	4654      	mov	r4, sl
 8002704:	2000      	movs	r0, #0
 8002706:	f04f 0c0a 	mov.w	ip, #10
 800270a:	4621      	mov	r1, r4
 800270c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002710:	3b30      	subs	r3, #48	; 0x30
 8002712:	2b09      	cmp	r3, #9
 8002714:	d94d      	bls.n	80027b2 <_vfiprintf_r+0x1a6>
 8002716:	b1b0      	cbz	r0, 8002746 <_vfiprintf_r+0x13a>
 8002718:	9207      	str	r2, [sp, #28]
 800271a:	e014      	b.n	8002746 <_vfiprintf_r+0x13a>
 800271c:	eba0 0308 	sub.w	r3, r0, r8
 8002720:	fa09 f303 	lsl.w	r3, r9, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	9304      	str	r3, [sp, #16]
 8002728:	46a2      	mov	sl, r4
 800272a:	e7d2      	b.n	80026d2 <_vfiprintf_r+0xc6>
 800272c:	9b03      	ldr	r3, [sp, #12]
 800272e:	1d19      	adds	r1, r3, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	9103      	str	r1, [sp, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	bfbb      	ittet	lt
 8002738:	425b      	neglt	r3, r3
 800273a:	f042 0202 	orrlt.w	r2, r2, #2
 800273e:	9307      	strge	r3, [sp, #28]
 8002740:	9307      	strlt	r3, [sp, #28]
 8002742:	bfb8      	it	lt
 8002744:	9204      	strlt	r2, [sp, #16]
 8002746:	7823      	ldrb	r3, [r4, #0]
 8002748:	2b2e      	cmp	r3, #46	; 0x2e
 800274a:	d10c      	bne.n	8002766 <_vfiprintf_r+0x15a>
 800274c:	7863      	ldrb	r3, [r4, #1]
 800274e:	2b2a      	cmp	r3, #42	; 0x2a
 8002750:	d134      	bne.n	80027bc <_vfiprintf_r+0x1b0>
 8002752:	9b03      	ldr	r3, [sp, #12]
 8002754:	1d1a      	adds	r2, r3, #4
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	9203      	str	r2, [sp, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	bfb8      	it	lt
 800275e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002762:	3402      	adds	r4, #2
 8002764:	9305      	str	r3, [sp, #20]
 8002766:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800283c <_vfiprintf_r+0x230>
 800276a:	7821      	ldrb	r1, [r4, #0]
 800276c:	2203      	movs	r2, #3
 800276e:	4650      	mov	r0, sl
 8002770:	f7fd fd36 	bl	80001e0 <memchr>
 8002774:	b138      	cbz	r0, 8002786 <_vfiprintf_r+0x17a>
 8002776:	9b04      	ldr	r3, [sp, #16]
 8002778:	eba0 000a 	sub.w	r0, r0, sl
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	4082      	lsls	r2, r0
 8002780:	4313      	orrs	r3, r2
 8002782:	3401      	adds	r4, #1
 8002784:	9304      	str	r3, [sp, #16]
 8002786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800278a:	4829      	ldr	r0, [pc, #164]	; (8002830 <_vfiprintf_r+0x224>)
 800278c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002790:	2206      	movs	r2, #6
 8002792:	f7fd fd25 	bl	80001e0 <memchr>
 8002796:	2800      	cmp	r0, #0
 8002798:	d03f      	beq.n	800281a <_vfiprintf_r+0x20e>
 800279a:	4b26      	ldr	r3, [pc, #152]	; (8002834 <_vfiprintf_r+0x228>)
 800279c:	bb1b      	cbnz	r3, 80027e6 <_vfiprintf_r+0x1da>
 800279e:	9b03      	ldr	r3, [sp, #12]
 80027a0:	3307      	adds	r3, #7
 80027a2:	f023 0307 	bic.w	r3, r3, #7
 80027a6:	3308      	adds	r3, #8
 80027a8:	9303      	str	r3, [sp, #12]
 80027aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ac:	443b      	add	r3, r7
 80027ae:	9309      	str	r3, [sp, #36]	; 0x24
 80027b0:	e768      	b.n	8002684 <_vfiprintf_r+0x78>
 80027b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80027b6:	460c      	mov	r4, r1
 80027b8:	2001      	movs	r0, #1
 80027ba:	e7a6      	b.n	800270a <_vfiprintf_r+0xfe>
 80027bc:	2300      	movs	r3, #0
 80027be:	3401      	adds	r4, #1
 80027c0:	9305      	str	r3, [sp, #20]
 80027c2:	4619      	mov	r1, r3
 80027c4:	f04f 0c0a 	mov.w	ip, #10
 80027c8:	4620      	mov	r0, r4
 80027ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027ce:	3a30      	subs	r2, #48	; 0x30
 80027d0:	2a09      	cmp	r2, #9
 80027d2:	d903      	bls.n	80027dc <_vfiprintf_r+0x1d0>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0c6      	beq.n	8002766 <_vfiprintf_r+0x15a>
 80027d8:	9105      	str	r1, [sp, #20]
 80027da:	e7c4      	b.n	8002766 <_vfiprintf_r+0x15a>
 80027dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80027e0:	4604      	mov	r4, r0
 80027e2:	2301      	movs	r3, #1
 80027e4:	e7f0      	b.n	80027c8 <_vfiprintf_r+0x1bc>
 80027e6:	ab03      	add	r3, sp, #12
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	462a      	mov	r2, r5
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <_vfiprintf_r+0x22c>)
 80027ee:	a904      	add	r1, sp, #16
 80027f0:	4630      	mov	r0, r6
 80027f2:	f3af 8000 	nop.w
 80027f6:	4607      	mov	r7, r0
 80027f8:	1c78      	adds	r0, r7, #1
 80027fa:	d1d6      	bne.n	80027aa <_vfiprintf_r+0x19e>
 80027fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027fe:	07d9      	lsls	r1, r3, #31
 8002800:	d405      	bmi.n	800280e <_vfiprintf_r+0x202>
 8002802:	89ab      	ldrh	r3, [r5, #12]
 8002804:	059a      	lsls	r2, r3, #22
 8002806:	d402      	bmi.n	800280e <_vfiprintf_r+0x202>
 8002808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800280a:	f7ff fdd5 	bl	80023b8 <__retarget_lock_release_recursive>
 800280e:	89ab      	ldrh	r3, [r5, #12]
 8002810:	065b      	lsls	r3, r3, #25
 8002812:	f53f af1d 	bmi.w	8002650 <_vfiprintf_r+0x44>
 8002816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002818:	e71c      	b.n	8002654 <_vfiprintf_r+0x48>
 800281a:	ab03      	add	r3, sp, #12
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	462a      	mov	r2, r5
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <_vfiprintf_r+0x22c>)
 8002822:	a904      	add	r1, sp, #16
 8002824:	4630      	mov	r0, r6
 8002826:	f000 f879 	bl	800291c <_printf_i>
 800282a:	e7e4      	b.n	80027f6 <_vfiprintf_r+0x1ea>
 800282c:	080030a0 	.word	0x080030a0
 8002830:	080030aa 	.word	0x080030aa
 8002834:	00000000 	.word	0x00000000
 8002838:	080025e7 	.word	0x080025e7
 800283c:	080030a6 	.word	0x080030a6

08002840 <_printf_common>:
 8002840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002844:	4616      	mov	r6, r2
 8002846:	4699      	mov	r9, r3
 8002848:	688a      	ldr	r2, [r1, #8]
 800284a:	690b      	ldr	r3, [r1, #16]
 800284c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002850:	4293      	cmp	r3, r2
 8002852:	bfb8      	it	lt
 8002854:	4613      	movlt	r3, r2
 8002856:	6033      	str	r3, [r6, #0]
 8002858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800285c:	4607      	mov	r7, r0
 800285e:	460c      	mov	r4, r1
 8002860:	b10a      	cbz	r2, 8002866 <_printf_common+0x26>
 8002862:	3301      	adds	r3, #1
 8002864:	6033      	str	r3, [r6, #0]
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	0699      	lsls	r1, r3, #26
 800286a:	bf42      	ittt	mi
 800286c:	6833      	ldrmi	r3, [r6, #0]
 800286e:	3302      	addmi	r3, #2
 8002870:	6033      	strmi	r3, [r6, #0]
 8002872:	6825      	ldr	r5, [r4, #0]
 8002874:	f015 0506 	ands.w	r5, r5, #6
 8002878:	d106      	bne.n	8002888 <_printf_common+0x48>
 800287a:	f104 0a19 	add.w	sl, r4, #25
 800287e:	68e3      	ldr	r3, [r4, #12]
 8002880:	6832      	ldr	r2, [r6, #0]
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	42ab      	cmp	r3, r5
 8002886:	dc26      	bgt.n	80028d6 <_printf_common+0x96>
 8002888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800288c:	1e13      	subs	r3, r2, #0
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	bf18      	it	ne
 8002892:	2301      	movne	r3, #1
 8002894:	0692      	lsls	r2, r2, #26
 8002896:	d42b      	bmi.n	80028f0 <_printf_common+0xb0>
 8002898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800289c:	4649      	mov	r1, r9
 800289e:	4638      	mov	r0, r7
 80028a0:	47c0      	blx	r8
 80028a2:	3001      	adds	r0, #1
 80028a4:	d01e      	beq.n	80028e4 <_printf_common+0xa4>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	6922      	ldr	r2, [r4, #16]
 80028aa:	f003 0306 	and.w	r3, r3, #6
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf02      	ittt	eq
 80028b2:	68e5      	ldreq	r5, [r4, #12]
 80028b4:	6833      	ldreq	r3, [r6, #0]
 80028b6:	1aed      	subeq	r5, r5, r3
 80028b8:	68a3      	ldr	r3, [r4, #8]
 80028ba:	bf0c      	ite	eq
 80028bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028c0:	2500      	movne	r5, #0
 80028c2:	4293      	cmp	r3, r2
 80028c4:	bfc4      	itt	gt
 80028c6:	1a9b      	subgt	r3, r3, r2
 80028c8:	18ed      	addgt	r5, r5, r3
 80028ca:	2600      	movs	r6, #0
 80028cc:	341a      	adds	r4, #26
 80028ce:	42b5      	cmp	r5, r6
 80028d0:	d11a      	bne.n	8002908 <_printf_common+0xc8>
 80028d2:	2000      	movs	r0, #0
 80028d4:	e008      	b.n	80028e8 <_printf_common+0xa8>
 80028d6:	2301      	movs	r3, #1
 80028d8:	4652      	mov	r2, sl
 80028da:	4649      	mov	r1, r9
 80028dc:	4638      	mov	r0, r7
 80028de:	47c0      	blx	r8
 80028e0:	3001      	adds	r0, #1
 80028e2:	d103      	bne.n	80028ec <_printf_common+0xac>
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ec:	3501      	adds	r5, #1
 80028ee:	e7c6      	b.n	800287e <_printf_common+0x3e>
 80028f0:	18e1      	adds	r1, r4, r3
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	2030      	movs	r0, #48	; 0x30
 80028f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028fa:	4422      	add	r2, r4
 80028fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002904:	3302      	adds	r3, #2
 8002906:	e7c7      	b.n	8002898 <_printf_common+0x58>
 8002908:	2301      	movs	r3, #1
 800290a:	4622      	mov	r2, r4
 800290c:	4649      	mov	r1, r9
 800290e:	4638      	mov	r0, r7
 8002910:	47c0      	blx	r8
 8002912:	3001      	adds	r0, #1
 8002914:	d0e6      	beq.n	80028e4 <_printf_common+0xa4>
 8002916:	3601      	adds	r6, #1
 8002918:	e7d9      	b.n	80028ce <_printf_common+0x8e>
	...

0800291c <_printf_i>:
 800291c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002920:	7e0f      	ldrb	r7, [r1, #24]
 8002922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002924:	2f78      	cmp	r7, #120	; 0x78
 8002926:	4691      	mov	r9, r2
 8002928:	4680      	mov	r8, r0
 800292a:	460c      	mov	r4, r1
 800292c:	469a      	mov	sl, r3
 800292e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002932:	d807      	bhi.n	8002944 <_printf_i+0x28>
 8002934:	2f62      	cmp	r7, #98	; 0x62
 8002936:	d80a      	bhi.n	800294e <_printf_i+0x32>
 8002938:	2f00      	cmp	r7, #0
 800293a:	f000 80d4 	beq.w	8002ae6 <_printf_i+0x1ca>
 800293e:	2f58      	cmp	r7, #88	; 0x58
 8002940:	f000 80c0 	beq.w	8002ac4 <_printf_i+0x1a8>
 8002944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800294c:	e03a      	b.n	80029c4 <_printf_i+0xa8>
 800294e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002952:	2b15      	cmp	r3, #21
 8002954:	d8f6      	bhi.n	8002944 <_printf_i+0x28>
 8002956:	a101      	add	r1, pc, #4	; (adr r1, 800295c <_printf_i+0x40>)
 8002958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800295c:	080029b5 	.word	0x080029b5
 8002960:	080029c9 	.word	0x080029c9
 8002964:	08002945 	.word	0x08002945
 8002968:	08002945 	.word	0x08002945
 800296c:	08002945 	.word	0x08002945
 8002970:	08002945 	.word	0x08002945
 8002974:	080029c9 	.word	0x080029c9
 8002978:	08002945 	.word	0x08002945
 800297c:	08002945 	.word	0x08002945
 8002980:	08002945 	.word	0x08002945
 8002984:	08002945 	.word	0x08002945
 8002988:	08002acd 	.word	0x08002acd
 800298c:	080029f5 	.word	0x080029f5
 8002990:	08002a87 	.word	0x08002a87
 8002994:	08002945 	.word	0x08002945
 8002998:	08002945 	.word	0x08002945
 800299c:	08002aef 	.word	0x08002aef
 80029a0:	08002945 	.word	0x08002945
 80029a4:	080029f5 	.word	0x080029f5
 80029a8:	08002945 	.word	0x08002945
 80029ac:	08002945 	.word	0x08002945
 80029b0:	08002a8f 	.word	0x08002a8f
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	1d1a      	adds	r2, r3, #4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	602a      	str	r2, [r5, #0]
 80029bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c4:	2301      	movs	r3, #1
 80029c6:	e09f      	b.n	8002b08 <_printf_i+0x1ec>
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	682b      	ldr	r3, [r5, #0]
 80029cc:	0607      	lsls	r7, r0, #24
 80029ce:	f103 0104 	add.w	r1, r3, #4
 80029d2:	6029      	str	r1, [r5, #0]
 80029d4:	d501      	bpl.n	80029da <_printf_i+0xbe>
 80029d6:	681e      	ldr	r6, [r3, #0]
 80029d8:	e003      	b.n	80029e2 <_printf_i+0xc6>
 80029da:	0646      	lsls	r6, r0, #25
 80029dc:	d5fb      	bpl.n	80029d6 <_printf_i+0xba>
 80029de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80029e2:	2e00      	cmp	r6, #0
 80029e4:	da03      	bge.n	80029ee <_printf_i+0xd2>
 80029e6:	232d      	movs	r3, #45	; 0x2d
 80029e8:	4276      	negs	r6, r6
 80029ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ee:	485a      	ldr	r0, [pc, #360]	; (8002b58 <_printf_i+0x23c>)
 80029f0:	230a      	movs	r3, #10
 80029f2:	e012      	b.n	8002a1a <_printf_i+0xfe>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	1d19      	adds	r1, r3, #4
 80029fa:	6029      	str	r1, [r5, #0]
 80029fc:	0605      	lsls	r5, r0, #24
 80029fe:	d501      	bpl.n	8002a04 <_printf_i+0xe8>
 8002a00:	681e      	ldr	r6, [r3, #0]
 8002a02:	e002      	b.n	8002a0a <_printf_i+0xee>
 8002a04:	0641      	lsls	r1, r0, #25
 8002a06:	d5fb      	bpl.n	8002a00 <_printf_i+0xe4>
 8002a08:	881e      	ldrh	r6, [r3, #0]
 8002a0a:	4853      	ldr	r0, [pc, #332]	; (8002b58 <_printf_i+0x23c>)
 8002a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8002a0e:	bf0c      	ite	eq
 8002a10:	2308      	moveq	r3, #8
 8002a12:	230a      	movne	r3, #10
 8002a14:	2100      	movs	r1, #0
 8002a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a1a:	6865      	ldr	r5, [r4, #4]
 8002a1c:	60a5      	str	r5, [r4, #8]
 8002a1e:	2d00      	cmp	r5, #0
 8002a20:	bfa2      	ittt	ge
 8002a22:	6821      	ldrge	r1, [r4, #0]
 8002a24:	f021 0104 	bicge.w	r1, r1, #4
 8002a28:	6021      	strge	r1, [r4, #0]
 8002a2a:	b90e      	cbnz	r6, 8002a30 <_printf_i+0x114>
 8002a2c:	2d00      	cmp	r5, #0
 8002a2e:	d04b      	beq.n	8002ac8 <_printf_i+0x1ac>
 8002a30:	4615      	mov	r5, r2
 8002a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a36:	fb03 6711 	mls	r7, r3, r1, r6
 8002a3a:	5dc7      	ldrb	r7, [r0, r7]
 8002a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a40:	4637      	mov	r7, r6
 8002a42:	42bb      	cmp	r3, r7
 8002a44:	460e      	mov	r6, r1
 8002a46:	d9f4      	bls.n	8002a32 <_printf_i+0x116>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d10b      	bne.n	8002a64 <_printf_i+0x148>
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	07de      	lsls	r6, r3, #31
 8002a50:	d508      	bpl.n	8002a64 <_printf_i+0x148>
 8002a52:	6923      	ldr	r3, [r4, #16]
 8002a54:	6861      	ldr	r1, [r4, #4]
 8002a56:	4299      	cmp	r1, r3
 8002a58:	bfde      	ittt	le
 8002a5a:	2330      	movle	r3, #48	; 0x30
 8002a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a64:	1b52      	subs	r2, r2, r5
 8002a66:	6122      	str	r2, [r4, #16]
 8002a68:	f8cd a000 	str.w	sl, [sp]
 8002a6c:	464b      	mov	r3, r9
 8002a6e:	aa03      	add	r2, sp, #12
 8002a70:	4621      	mov	r1, r4
 8002a72:	4640      	mov	r0, r8
 8002a74:	f7ff fee4 	bl	8002840 <_printf_common>
 8002a78:	3001      	adds	r0, #1
 8002a7a:	d14a      	bne.n	8002b12 <_printf_i+0x1f6>
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	b004      	add	sp, #16
 8002a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	f043 0320 	orr.w	r3, r3, #32
 8002a8c:	6023      	str	r3, [r4, #0]
 8002a8e:	4833      	ldr	r0, [pc, #204]	; (8002b5c <_printf_i+0x240>)
 8002a90:	2778      	movs	r7, #120	; 0x78
 8002a92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	6829      	ldr	r1, [r5, #0]
 8002a9a:	061f      	lsls	r7, r3, #24
 8002a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002aa0:	d402      	bmi.n	8002aa8 <_printf_i+0x18c>
 8002aa2:	065f      	lsls	r7, r3, #25
 8002aa4:	bf48      	it	mi
 8002aa6:	b2b6      	uxthmi	r6, r6
 8002aa8:	07df      	lsls	r7, r3, #31
 8002aaa:	bf48      	it	mi
 8002aac:	f043 0320 	orrmi.w	r3, r3, #32
 8002ab0:	6029      	str	r1, [r5, #0]
 8002ab2:	bf48      	it	mi
 8002ab4:	6023      	strmi	r3, [r4, #0]
 8002ab6:	b91e      	cbnz	r6, 8002ac0 <_printf_i+0x1a4>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	f023 0320 	bic.w	r3, r3, #32
 8002abe:	6023      	str	r3, [r4, #0]
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	e7a7      	b.n	8002a14 <_printf_i+0xf8>
 8002ac4:	4824      	ldr	r0, [pc, #144]	; (8002b58 <_printf_i+0x23c>)
 8002ac6:	e7e4      	b.n	8002a92 <_printf_i+0x176>
 8002ac8:	4615      	mov	r5, r2
 8002aca:	e7bd      	b.n	8002a48 <_printf_i+0x12c>
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	6826      	ldr	r6, [r4, #0]
 8002ad0:	6961      	ldr	r1, [r4, #20]
 8002ad2:	1d18      	adds	r0, r3, #4
 8002ad4:	6028      	str	r0, [r5, #0]
 8002ad6:	0635      	lsls	r5, r6, #24
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	d501      	bpl.n	8002ae0 <_printf_i+0x1c4>
 8002adc:	6019      	str	r1, [r3, #0]
 8002ade:	e002      	b.n	8002ae6 <_printf_i+0x1ca>
 8002ae0:	0670      	lsls	r0, r6, #25
 8002ae2:	d5fb      	bpl.n	8002adc <_printf_i+0x1c0>
 8002ae4:	8019      	strh	r1, [r3, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6123      	str	r3, [r4, #16]
 8002aea:	4615      	mov	r5, r2
 8002aec:	e7bc      	b.n	8002a68 <_printf_i+0x14c>
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	1d1a      	adds	r2, r3, #4
 8002af2:	602a      	str	r2, [r5, #0]
 8002af4:	681d      	ldr	r5, [r3, #0]
 8002af6:	6862      	ldr	r2, [r4, #4]
 8002af8:	2100      	movs	r1, #0
 8002afa:	4628      	mov	r0, r5
 8002afc:	f7fd fb70 	bl	80001e0 <memchr>
 8002b00:	b108      	cbz	r0, 8002b06 <_printf_i+0x1ea>
 8002b02:	1b40      	subs	r0, r0, r5
 8002b04:	6060      	str	r0, [r4, #4]
 8002b06:	6863      	ldr	r3, [r4, #4]
 8002b08:	6123      	str	r3, [r4, #16]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b10:	e7aa      	b.n	8002a68 <_printf_i+0x14c>
 8002b12:	6923      	ldr	r3, [r4, #16]
 8002b14:	462a      	mov	r2, r5
 8002b16:	4649      	mov	r1, r9
 8002b18:	4640      	mov	r0, r8
 8002b1a:	47d0      	blx	sl
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d0ad      	beq.n	8002a7c <_printf_i+0x160>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	079b      	lsls	r3, r3, #30
 8002b24:	d413      	bmi.n	8002b4e <_printf_i+0x232>
 8002b26:	68e0      	ldr	r0, [r4, #12]
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	4298      	cmp	r0, r3
 8002b2c:	bfb8      	it	lt
 8002b2e:	4618      	movlt	r0, r3
 8002b30:	e7a6      	b.n	8002a80 <_printf_i+0x164>
 8002b32:	2301      	movs	r3, #1
 8002b34:	4632      	mov	r2, r6
 8002b36:	4649      	mov	r1, r9
 8002b38:	4640      	mov	r0, r8
 8002b3a:	47d0      	blx	sl
 8002b3c:	3001      	adds	r0, #1
 8002b3e:	d09d      	beq.n	8002a7c <_printf_i+0x160>
 8002b40:	3501      	adds	r5, #1
 8002b42:	68e3      	ldr	r3, [r4, #12]
 8002b44:	9903      	ldr	r1, [sp, #12]
 8002b46:	1a5b      	subs	r3, r3, r1
 8002b48:	42ab      	cmp	r3, r5
 8002b4a:	dcf2      	bgt.n	8002b32 <_printf_i+0x216>
 8002b4c:	e7eb      	b.n	8002b26 <_printf_i+0x20a>
 8002b4e:	2500      	movs	r5, #0
 8002b50:	f104 0619 	add.w	r6, r4, #25
 8002b54:	e7f5      	b.n	8002b42 <_printf_i+0x226>
 8002b56:	bf00      	nop
 8002b58:	080030b1 	.word	0x080030b1
 8002b5c:	080030c2 	.word	0x080030c2

08002b60 <__sflush_r>:
 8002b60:	898a      	ldrh	r2, [r1, #12]
 8002b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b66:	4605      	mov	r5, r0
 8002b68:	0710      	lsls	r0, r2, #28
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	d458      	bmi.n	8002c20 <__sflush_r+0xc0>
 8002b6e:	684b      	ldr	r3, [r1, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	dc05      	bgt.n	8002b80 <__sflush_r+0x20>
 8002b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	dc02      	bgt.n	8002b80 <__sflush_r+0x20>
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	d0f9      	beq.n	8002b7a <__sflush_r+0x1a>
 8002b86:	2300      	movs	r3, #0
 8002b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b8c:	682f      	ldr	r7, [r5, #0]
 8002b8e:	6a21      	ldr	r1, [r4, #32]
 8002b90:	602b      	str	r3, [r5, #0]
 8002b92:	d032      	beq.n	8002bfa <__sflush_r+0x9a>
 8002b94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b96:	89a3      	ldrh	r3, [r4, #12]
 8002b98:	075a      	lsls	r2, r3, #29
 8002b9a:	d505      	bpl.n	8002ba8 <__sflush_r+0x48>
 8002b9c:	6863      	ldr	r3, [r4, #4]
 8002b9e:	1ac0      	subs	r0, r0, r3
 8002ba0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ba2:	b10b      	cbz	r3, 8002ba8 <__sflush_r+0x48>
 8002ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ba6:	1ac0      	subs	r0, r0, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	4602      	mov	r2, r0
 8002bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bae:	6a21      	ldr	r1, [r4, #32]
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	47b0      	blx	r6
 8002bb4:	1c43      	adds	r3, r0, #1
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	d106      	bne.n	8002bc8 <__sflush_r+0x68>
 8002bba:	6829      	ldr	r1, [r5, #0]
 8002bbc:	291d      	cmp	r1, #29
 8002bbe:	d82b      	bhi.n	8002c18 <__sflush_r+0xb8>
 8002bc0:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <__sflush_r+0x108>)
 8002bc2:	410a      	asrs	r2, r1
 8002bc4:	07d6      	lsls	r6, r2, #31
 8002bc6:	d427      	bmi.n	8002c18 <__sflush_r+0xb8>
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6062      	str	r2, [r4, #4]
 8002bcc:	04d9      	lsls	r1, r3, #19
 8002bce:	6922      	ldr	r2, [r4, #16]
 8002bd0:	6022      	str	r2, [r4, #0]
 8002bd2:	d504      	bpl.n	8002bde <__sflush_r+0x7e>
 8002bd4:	1c42      	adds	r2, r0, #1
 8002bd6:	d101      	bne.n	8002bdc <__sflush_r+0x7c>
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	b903      	cbnz	r3, 8002bde <__sflush_r+0x7e>
 8002bdc:	6560      	str	r0, [r4, #84]	; 0x54
 8002bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002be0:	602f      	str	r7, [r5, #0]
 8002be2:	2900      	cmp	r1, #0
 8002be4:	d0c9      	beq.n	8002b7a <__sflush_r+0x1a>
 8002be6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bea:	4299      	cmp	r1, r3
 8002bec:	d002      	beq.n	8002bf4 <__sflush_r+0x94>
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f7ff fbea 	bl	80023c8 <_free_r>
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	6360      	str	r0, [r4, #52]	; 0x34
 8002bf8:	e7c0      	b.n	8002b7c <__sflush_r+0x1c>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	47b0      	blx	r6
 8002c00:	1c41      	adds	r1, r0, #1
 8002c02:	d1c8      	bne.n	8002b96 <__sflush_r+0x36>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0c5      	beq.n	8002b96 <__sflush_r+0x36>
 8002c0a:	2b1d      	cmp	r3, #29
 8002c0c:	d001      	beq.n	8002c12 <__sflush_r+0xb2>
 8002c0e:	2b16      	cmp	r3, #22
 8002c10:	d101      	bne.n	8002c16 <__sflush_r+0xb6>
 8002c12:	602f      	str	r7, [r5, #0]
 8002c14:	e7b1      	b.n	8002b7a <__sflush_r+0x1a>
 8002c16:	89a3      	ldrh	r3, [r4, #12]
 8002c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	e7ad      	b.n	8002b7c <__sflush_r+0x1c>
 8002c20:	690f      	ldr	r7, [r1, #16]
 8002c22:	2f00      	cmp	r7, #0
 8002c24:	d0a9      	beq.n	8002b7a <__sflush_r+0x1a>
 8002c26:	0793      	lsls	r3, r2, #30
 8002c28:	680e      	ldr	r6, [r1, #0]
 8002c2a:	bf08      	it	eq
 8002c2c:	694b      	ldreq	r3, [r1, #20]
 8002c2e:	600f      	str	r7, [r1, #0]
 8002c30:	bf18      	it	ne
 8002c32:	2300      	movne	r3, #0
 8002c34:	eba6 0807 	sub.w	r8, r6, r7
 8002c38:	608b      	str	r3, [r1, #8]
 8002c3a:	f1b8 0f00 	cmp.w	r8, #0
 8002c3e:	dd9c      	ble.n	8002b7a <__sflush_r+0x1a>
 8002c40:	6a21      	ldr	r1, [r4, #32]
 8002c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c44:	4643      	mov	r3, r8
 8002c46:	463a      	mov	r2, r7
 8002c48:	4628      	mov	r0, r5
 8002c4a:	47b0      	blx	r6
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	dc06      	bgt.n	8002c5e <__sflush_r+0xfe>
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c56:	81a3      	strh	r3, [r4, #12]
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	e78e      	b.n	8002b7c <__sflush_r+0x1c>
 8002c5e:	4407      	add	r7, r0
 8002c60:	eba8 0800 	sub.w	r8, r8, r0
 8002c64:	e7e9      	b.n	8002c3a <__sflush_r+0xda>
 8002c66:	bf00      	nop
 8002c68:	dfbffffe 	.word	0xdfbffffe

08002c6c <_fflush_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	690b      	ldr	r3, [r1, #16]
 8002c70:	4605      	mov	r5, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	b913      	cbnz	r3, 8002c7c <_fflush_r+0x10>
 8002c76:	2500      	movs	r5, #0
 8002c78:	4628      	mov	r0, r5
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	b118      	cbz	r0, 8002c86 <_fflush_r+0x1a>
 8002c7e:	6a03      	ldr	r3, [r0, #32]
 8002c80:	b90b      	cbnz	r3, 8002c86 <_fflush_r+0x1a>
 8002c82:	f7ff fa93 	bl	80021ac <__sinit>
 8002c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f3      	beq.n	8002c76 <_fflush_r+0xa>
 8002c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c90:	07d0      	lsls	r0, r2, #31
 8002c92:	d404      	bmi.n	8002c9e <_fflush_r+0x32>
 8002c94:	0599      	lsls	r1, r3, #22
 8002c96:	d402      	bmi.n	8002c9e <_fflush_r+0x32>
 8002c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c9a:	f7ff fb8c 	bl	80023b6 <__retarget_lock_acquire_recursive>
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f7ff ff5d 	bl	8002b60 <__sflush_r>
 8002ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ca8:	07da      	lsls	r2, r3, #31
 8002caa:	4605      	mov	r5, r0
 8002cac:	d4e4      	bmi.n	8002c78 <_fflush_r+0xc>
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	059b      	lsls	r3, r3, #22
 8002cb2:	d4e1      	bmi.n	8002c78 <_fflush_r+0xc>
 8002cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cb6:	f7ff fb7f 	bl	80023b8 <__retarget_lock_release_recursive>
 8002cba:	e7dd      	b.n	8002c78 <_fflush_r+0xc>

08002cbc <__swbuf_r>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	460e      	mov	r6, r1
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	b118      	cbz	r0, 8002cce <__swbuf_r+0x12>
 8002cc6:	6a03      	ldr	r3, [r0, #32]
 8002cc8:	b90b      	cbnz	r3, 8002cce <__swbuf_r+0x12>
 8002cca:	f7ff fa6f 	bl	80021ac <__sinit>
 8002cce:	69a3      	ldr	r3, [r4, #24]
 8002cd0:	60a3      	str	r3, [r4, #8]
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	071a      	lsls	r2, r3, #28
 8002cd6:	d525      	bpl.n	8002d24 <__swbuf_r+0x68>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	b31b      	cbz	r3, 8002d24 <__swbuf_r+0x68>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	6922      	ldr	r2, [r4, #16]
 8002ce0:	1a98      	subs	r0, r3, r2
 8002ce2:	6963      	ldr	r3, [r4, #20]
 8002ce4:	b2f6      	uxtb	r6, r6
 8002ce6:	4283      	cmp	r3, r0
 8002ce8:	4637      	mov	r7, r6
 8002cea:	dc04      	bgt.n	8002cf6 <__swbuf_r+0x3a>
 8002cec:	4621      	mov	r1, r4
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f7ff ffbc 	bl	8002c6c <_fflush_r>
 8002cf4:	b9e0      	cbnz	r0, 8002d30 <__swbuf_r+0x74>
 8002cf6:	68a3      	ldr	r3, [r4, #8]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	60a3      	str	r3, [r4, #8]
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	6022      	str	r2, [r4, #0]
 8002d02:	701e      	strb	r6, [r3, #0]
 8002d04:	6962      	ldr	r2, [r4, #20]
 8002d06:	1c43      	adds	r3, r0, #1
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d004      	beq.n	8002d16 <__swbuf_r+0x5a>
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	07db      	lsls	r3, r3, #31
 8002d10:	d506      	bpl.n	8002d20 <__swbuf_r+0x64>
 8002d12:	2e0a      	cmp	r6, #10
 8002d14:	d104      	bne.n	8002d20 <__swbuf_r+0x64>
 8002d16:	4621      	mov	r1, r4
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f7ff ffa7 	bl	8002c6c <_fflush_r>
 8002d1e:	b938      	cbnz	r0, 8002d30 <__swbuf_r+0x74>
 8002d20:	4638      	mov	r0, r7
 8002d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d24:	4621      	mov	r1, r4
 8002d26:	4628      	mov	r0, r5
 8002d28:	f000 f806 	bl	8002d38 <__swsetup_r>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d0d5      	beq.n	8002cdc <__swbuf_r+0x20>
 8002d30:	f04f 37ff 	mov.w	r7, #4294967295
 8002d34:	e7f4      	b.n	8002d20 <__swbuf_r+0x64>
	...

08002d38 <__swsetup_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <__swsetup_r+0xac>)
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	460c      	mov	r4, r1
 8002d42:	b118      	cbz	r0, 8002d4c <__swsetup_r+0x14>
 8002d44:	6a03      	ldr	r3, [r0, #32]
 8002d46:	b90b      	cbnz	r3, 8002d4c <__swsetup_r+0x14>
 8002d48:	f7ff fa30 	bl	80021ac <__sinit>
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d52:	0718      	lsls	r0, r3, #28
 8002d54:	d422      	bmi.n	8002d9c <__swsetup_r+0x64>
 8002d56:	06d9      	lsls	r1, r3, #27
 8002d58:	d407      	bmi.n	8002d6a <__swsetup_r+0x32>
 8002d5a:	2309      	movs	r3, #9
 8002d5c:	602b      	str	r3, [r5, #0]
 8002d5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d62:	81a3      	strh	r3, [r4, #12]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	e034      	b.n	8002dd4 <__swsetup_r+0x9c>
 8002d6a:	0758      	lsls	r0, r3, #29
 8002d6c:	d512      	bpl.n	8002d94 <__swsetup_r+0x5c>
 8002d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d70:	b141      	cbz	r1, 8002d84 <__swsetup_r+0x4c>
 8002d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d76:	4299      	cmp	r1, r3
 8002d78:	d002      	beq.n	8002d80 <__swsetup_r+0x48>
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f7ff fb24 	bl	80023c8 <_free_r>
 8002d80:	2300      	movs	r3, #0
 8002d82:	6363      	str	r3, [r4, #52]	; 0x34
 8002d84:	89a3      	ldrh	r3, [r4, #12]
 8002d86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d8a:	81a3      	strh	r3, [r4, #12]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6063      	str	r3, [r4, #4]
 8002d90:	6923      	ldr	r3, [r4, #16]
 8002d92:	6023      	str	r3, [r4, #0]
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	81a3      	strh	r3, [r4, #12]
 8002d9c:	6923      	ldr	r3, [r4, #16]
 8002d9e:	b94b      	cbnz	r3, 8002db4 <__swsetup_r+0x7c>
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002daa:	d003      	beq.n	8002db4 <__swsetup_r+0x7c>
 8002dac:	4621      	mov	r1, r4
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 f894 	bl	8002edc <__smakebuf_r>
 8002db4:	89a0      	ldrh	r0, [r4, #12]
 8002db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dba:	f010 0301 	ands.w	r3, r0, #1
 8002dbe:	d00a      	beq.n	8002dd6 <__swsetup_r+0x9e>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	6963      	ldr	r3, [r4, #20]
 8002dc6:	425b      	negs	r3, r3
 8002dc8:	61a3      	str	r3, [r4, #24]
 8002dca:	6923      	ldr	r3, [r4, #16]
 8002dcc:	b943      	cbnz	r3, 8002de0 <__swsetup_r+0xa8>
 8002dce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002dd2:	d1c4      	bne.n	8002d5e <__swsetup_r+0x26>
 8002dd4:	bd38      	pop	{r3, r4, r5, pc}
 8002dd6:	0781      	lsls	r1, r0, #30
 8002dd8:	bf58      	it	pl
 8002dda:	6963      	ldrpl	r3, [r4, #20]
 8002ddc:	60a3      	str	r3, [r4, #8]
 8002dde:	e7f4      	b.n	8002dca <__swsetup_r+0x92>
 8002de0:	2000      	movs	r0, #0
 8002de2:	e7f7      	b.n	8002dd4 <__swsetup_r+0x9c>
 8002de4:	20000064 	.word	0x20000064

08002de8 <_raise_r>:
 8002de8:	291f      	cmp	r1, #31
 8002dea:	b538      	push	{r3, r4, r5, lr}
 8002dec:	4604      	mov	r4, r0
 8002dee:	460d      	mov	r5, r1
 8002df0:	d904      	bls.n	8002dfc <_raise_r+0x14>
 8002df2:	2316      	movs	r3, #22
 8002df4:	6003      	str	r3, [r0, #0]
 8002df6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfa:	bd38      	pop	{r3, r4, r5, pc}
 8002dfc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002dfe:	b112      	cbz	r2, 8002e06 <_raise_r+0x1e>
 8002e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002e04:	b94b      	cbnz	r3, 8002e1a <_raise_r+0x32>
 8002e06:	4620      	mov	r0, r4
 8002e08:	f000 f830 	bl	8002e6c <_getpid_r>
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	4601      	mov	r1, r0
 8002e10:	4620      	mov	r0, r4
 8002e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e16:	f000 b817 	b.w	8002e48 <_kill_r>
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d00a      	beq.n	8002e34 <_raise_r+0x4c>
 8002e1e:	1c59      	adds	r1, r3, #1
 8002e20:	d103      	bne.n	8002e2a <_raise_r+0x42>
 8002e22:	2316      	movs	r3, #22
 8002e24:	6003      	str	r3, [r0, #0]
 8002e26:	2001      	movs	r0, #1
 8002e28:	e7e7      	b.n	8002dfa <_raise_r+0x12>
 8002e2a:	2400      	movs	r4, #0
 8002e2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002e30:	4628      	mov	r0, r5
 8002e32:	4798      	blx	r3
 8002e34:	2000      	movs	r0, #0
 8002e36:	e7e0      	b.n	8002dfa <_raise_r+0x12>

08002e38 <raise>:
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <raise+0xc>)
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	f7ff bfd3 	b.w	8002de8 <_raise_r>
 8002e42:	bf00      	nop
 8002e44:	20000064 	.word	0x20000064

08002e48 <_kill_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4d07      	ldr	r5, [pc, #28]	; (8002e68 <_kill_r+0x20>)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4608      	mov	r0, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	602b      	str	r3, [r5, #0]
 8002e56:	f7fe fa49 	bl	80012ec <_kill>
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	d102      	bne.n	8002e64 <_kill_r+0x1c>
 8002e5e:	682b      	ldr	r3, [r5, #0]
 8002e60:	b103      	cbz	r3, 8002e64 <_kill_r+0x1c>
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	bd38      	pop	{r3, r4, r5, pc}
 8002e66:	bf00      	nop
 8002e68:	200002d4 	.word	0x200002d4

08002e6c <_getpid_r>:
 8002e6c:	f7fe ba36 	b.w	80012dc <_getpid>

08002e70 <_sbrk_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4d06      	ldr	r5, [pc, #24]	; (8002e8c <_sbrk_r+0x1c>)
 8002e74:	2300      	movs	r3, #0
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	602b      	str	r3, [r5, #0]
 8002e7c:	f7fe fabe 	bl	80013fc <_sbrk>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d102      	bne.n	8002e8a <_sbrk_r+0x1a>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	b103      	cbz	r3, 8002e8a <_sbrk_r+0x1a>
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	200002d4 	.word	0x200002d4

08002e90 <__swhatbuf_r>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	460c      	mov	r4, r1
 8002e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e98:	2900      	cmp	r1, #0
 8002e9a:	b096      	sub	sp, #88	; 0x58
 8002e9c:	4615      	mov	r5, r2
 8002e9e:	461e      	mov	r6, r3
 8002ea0:	da0d      	bge.n	8002ebe <__swhatbuf_r+0x2e>
 8002ea2:	89a3      	ldrh	r3, [r4, #12]
 8002ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002eb2:	2340      	movne	r3, #64	; 0x40
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	6031      	str	r1, [r6, #0]
 8002eb8:	602b      	str	r3, [r5, #0]
 8002eba:	b016      	add	sp, #88	; 0x58
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
 8002ebe:	466a      	mov	r2, sp
 8002ec0:	f000 f848 	bl	8002f54 <_fstat_r>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	dbec      	blt.n	8002ea2 <__swhatbuf_r+0x12>
 8002ec8:	9901      	ldr	r1, [sp, #4]
 8002eca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002ece:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002ed2:	4259      	negs	r1, r3
 8002ed4:	4159      	adcs	r1, r3
 8002ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eda:	e7eb      	b.n	8002eb4 <__swhatbuf_r+0x24>

08002edc <__smakebuf_r>:
 8002edc:	898b      	ldrh	r3, [r1, #12]
 8002ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ee0:	079d      	lsls	r5, r3, #30
 8002ee2:	4606      	mov	r6, r0
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	d507      	bpl.n	8002ef8 <__smakebuf_r+0x1c>
 8002ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002eec:	6023      	str	r3, [r4, #0]
 8002eee:	6123      	str	r3, [r4, #16]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	6163      	str	r3, [r4, #20]
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	ab01      	add	r3, sp, #4
 8002efa:	466a      	mov	r2, sp
 8002efc:	f7ff ffc8 	bl	8002e90 <__swhatbuf_r>
 8002f00:	9900      	ldr	r1, [sp, #0]
 8002f02:	4605      	mov	r5, r0
 8002f04:	4630      	mov	r0, r6
 8002f06:	f7ff facb 	bl	80024a0 <_malloc_r>
 8002f0a:	b948      	cbnz	r0, 8002f20 <__smakebuf_r+0x44>
 8002f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f10:	059a      	lsls	r2, r3, #22
 8002f12:	d4ef      	bmi.n	8002ef4 <__smakebuf_r+0x18>
 8002f14:	f023 0303 	bic.w	r3, r3, #3
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	e7e3      	b.n	8002ee8 <__smakebuf_r+0xc>
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	6020      	str	r0, [r4, #0]
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	9b00      	ldr	r3, [sp, #0]
 8002f2c:	6163      	str	r3, [r4, #20]
 8002f2e:	9b01      	ldr	r3, [sp, #4]
 8002f30:	6120      	str	r0, [r4, #16]
 8002f32:	b15b      	cbz	r3, 8002f4c <__smakebuf_r+0x70>
 8002f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f000 f81d 	bl	8002f78 <_isatty_r>
 8002f3e:	b128      	cbz	r0, 8002f4c <__smakebuf_r+0x70>
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	431d      	orrs	r5, r3
 8002f50:	81a5      	strh	r5, [r4, #12]
 8002f52:	e7cf      	b.n	8002ef4 <__smakebuf_r+0x18>

08002f54 <_fstat_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4d07      	ldr	r5, [pc, #28]	; (8002f74 <_fstat_r+0x20>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	602b      	str	r3, [r5, #0]
 8002f62:	f7fe fa22 	bl	80013aa <_fstat>
 8002f66:	1c43      	adds	r3, r0, #1
 8002f68:	d102      	bne.n	8002f70 <_fstat_r+0x1c>
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	b103      	cbz	r3, 8002f70 <_fstat_r+0x1c>
 8002f6e:	6023      	str	r3, [r4, #0]
 8002f70:	bd38      	pop	{r3, r4, r5, pc}
 8002f72:	bf00      	nop
 8002f74:	200002d4 	.word	0x200002d4

08002f78 <_isatty_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4d06      	ldr	r5, [pc, #24]	; (8002f94 <_isatty_r+0x1c>)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fe fa21 	bl	80013ca <_isatty>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_isatty_r+0x1a>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_isatty_r+0x1a>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	200002d4 	.word	0x200002d4

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
