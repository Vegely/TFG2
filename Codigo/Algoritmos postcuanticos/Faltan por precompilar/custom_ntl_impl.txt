/******************************************************************************
 * BIKE -- Bit Flipping Key Encapsulation
 * Custom C Implementation (replaces NTL dependency)
 *
 * Copyright (c) 2021 Nir Drucker, Shay Gueron, Rafael Misoczki, Tobias Oder,
 * Tim Gueneysu, Jan Richter-Brockmann.
 * Contact: drucker.nir@gmail.com, shay.gueron@gmail.com,
 * rafaelmisoczki@google.com, tobias.oder@rub.de, tim.gueneysu@rub.de,
 * jan.richter-brockmann@rub.de.
 *
 * Permission to use this code for BIKE is granted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * The names of the contributors may not be used to endorse or promote
 *   products derived from this software without specific prior written
 *   permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ""AS IS"" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS CORPORATION OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

#include "ntl.h"
#include <string.h>
#include <stdint.h>

// Helper function implementations for GF(2) polynomial arithmetic

static inline int get_bit(const uint8_t poly[R_SIZE], int bit_pos) {
    if (bit_pos < 0 || bit_pos >= R_BITS) return 0;
    int byte_idx = bit_pos / 8;
    int bit_idx = bit_pos % 8;
    return (poly[byte_idx] >> bit_idx) & 1;
}

static inline void set_bit(uint8_t poly[R_SIZE], int bit_pos) {
    if (bit_pos < 0 || bit_pos >= R_BITS) return;
    int byte_idx = bit_pos / 8;
    int bit_idx = bit_pos % 8;
    poly[byte_idx] |= (1U << bit_idx);
}

static inline void clear_bit(uint8_t poly[R_SIZE], int bit_pos) {
    if (bit_pos < 0 || bit_pos >= R_BITS) return;
    int byte_idx = bit_pos / 8;
    int bit_idx = bit_pos % 8;
    poly[byte_idx] &= ~(1U << bit_idx);
}

static inline int is_zero(const uint8_t poly[R_SIZE]) {
    for (int i = 0; i < R_SIZE; i++) {
        if (poly[i] != 0) return 0;
    }
    return 1;
}

static inline int degree(const uint8_t poly[R_SIZE]) {
    for (int i = R_BITS - 1; i >= 0; i--) {
        if (get_bit(poly, i)) return i;
    }
    return -1; // Zero polynomial
}

static void left_shift(uint8_t result[R_SIZE], const uint8_t poly[R_SIZE], int shift) {
    memset(result, 0, R_SIZE);
    
    if (shift <= 0 || shift >= R_BITS) return;
    
    int byte_shift = shift / 8;
    int bit_shift = shift % 8;
    
    for (int i = R_SIZE - 1; i >= byte_shift; i--) {
        result[i] = poly[i - byte_shift] << bit_shift;
        if (bit_shift > 0 && (i - byte_shift - 1) >= 0) {
            result[i] |= poly[i - byte_shift - 1] >> (8 - bit_shift);
        }
    }
}

// Modular reduction by the irreducible polynomial x^R_BITS + 1
static void mod_reduce(uint8_t result[R_SIZE], const uint8_t poly[], int poly_bytes) {
    uint8_t temp[2 * R_SIZE];
    memset(temp, 0, sizeof(temp));
    memcpy(temp, poly, poly_bytes > 2 * R_SIZE ? 2 * R_SIZE : poly_bytes);
    
    // Reduce by x^R_BITS + 1
    for (int i = 2 * R_BITS - 1; i >= R_BITS; i--) {
        if (get_bit(temp, i)) {
            // x^i = x^(i-R_BITS) (mod x^R_BITS + 1)
            int target_bit = i - R_BITS;
            if (get_bit(temp, target_bit)) {
                clear_bit(temp, target_bit);
            } else {
                set_bit(temp, target_bit);
            }
            clear_bit(temp, i);
        }
    }
    
    memcpy(result, temp, R_SIZE);
}

// Full multiplication without reduction
static void multiply_full(uint8_t result[], const uint8_t a[R_SIZE], const uint8_t b[R_SIZE]) {
    memset(result, 0, 2 * R_SIZE);
    
    for (int i = 0; i < R_BITS; i++) {
        if (get_bit(a, i)) {
            for (int j = 0; j < R_BITS; j++) {
                if (get_bit(b, j)) {
                    int result_bit = i + j;
                    if (result_bit < 2 * R_BITS) {
                        int byte_idx = result_bit / 8;
                        int bit_idx = result_bit % 8;
                        result[byte_idx] ^= (1U << bit_idx);
                    }
                }
            }
        }
    }
}

// Extended Euclidean algorithm for GF(2) polynomials
static void extended_gcd(uint8_t gcd[R_SIZE], uint8_t s[R_SIZE], uint8_t t[R_SIZE],
                        const uint8_t a[R_SIZE], const uint8_t b[R_SIZE]) {
    uint8_t old_r[R_SIZE], r[R_SIZE];
    uint8_t old_s[R_SIZE], temp_s[R_SIZE];
    uint8_t old_t[R_SIZE], temp_t[R_SIZE];
    uint8_t quotient[R_SIZE], temp[R_SIZE];
    uint8_t temp_mul[2 * R_SIZE];
    
    memcpy(old_r, a, R_SIZE);
    memcpy(r, b, R_SIZE);
    
    memset(old_s, 0, R_SIZE);
    set_bit(old_s, 0); // old_s = 1
    memset(temp_s, 0, R_SIZE);
    
    memset(old_t, 0, R_SIZE);
    memset(temp_t, 0, R_SIZE);
    set_bit(temp_t, 0); // temp_t = 1
    
    while (!is_zero(r)) {
        // Polynomial division to get quotient
        memset(quotient, 0, R_SIZE);
        memcpy(temp, old_r, R_SIZE);
        
        int deg_temp = degree(temp);
        int deg_r = degree(r);
        
        while (deg_temp >= deg_r && deg_temp >= 0) {
            int shift = deg_temp - deg_r;
            set_bit(quotient, shift);
            
            uint8_t shifted_r[R_SIZE];
            left_shift(shifted_r, r, shift);
            
            for (int i = 0; i < R_SIZE; i++) {
                temp[i] ^= shifted_r[i];
            }
            deg_temp = degree(temp);
        }
        
        // Update variables
        memcpy(old_r, r, R_SIZE);
        memcpy(r, temp, R_SIZE);
        
        // Update s
        multiply_full(temp_mul, quotient, temp_s);
        mod_reduce(temp, temp_mul, 2 * R_SIZE);
        for (int i = 0; i < R_SIZE; i++) {
            uint8_t new_s = old_s[i] ^ temp[i];
            old_s[i] = temp_s[i];
            temp_s[i] = new_s;
        }
        
        // Update t
        multiply_full(temp_mul, quotient, temp_t);
        mod_reduce(temp, temp_mul, 2 * R_SIZE);
        for (int i = 0; i < R_SIZE; i++) {
            uint8_t new_t = old_t[i] ^ temp[i];
            old_t[i] = temp_t[i];
            temp_t[i] = new_t;
        }
    }
    
    memcpy(gcd, old_r, R_SIZE);
    memcpy(s, old_s, R_SIZE);
    memcpy(t, old_t, R_SIZE);
}

// Main NTL interface functions

void ntl_add(OUT uint8_t res_bin[R_SIZE],
        IN const uint8_t a_bin[R_SIZE],
        IN const uint8_t b_bin[R_SIZE])
{
    // In GF(2), addition is XOR
    for (int i = 0; i < R_SIZE; i++) {
        res_bin[i] = a_bin[i] ^ b_bin[i];
    }
}

void ntl_mod_mul(OUT uint8_t res_bin[R_SIZE],
        IN const uint8_t a_bin[R_SIZE],
        IN const uint8_t b_bin[R_SIZE])
{
    uint8_t temp_result[2 * R_SIZE];
    multiply_full(temp_result, a_bin, b_bin);
    mod_reduce(res_bin, temp_result, 2 * R_SIZE);
}

void ntl_mod_inv(OUT uint8_t res_bin[R_SIZE],
        IN const uint8_t a_bin[R_SIZE])
{
    uint8_t modulus[R_SIZE];
    uint8_t gcd[R_SIZE], s[R_SIZE], t[R_SIZE];
    
    // Create modulus: x^R_BITS + 1
    memset(modulus, 0, R_SIZE);
    set_bit(modulus, 0);     // +1
    if (R_BITS < R_SIZE * 8) {
        set_bit(modulus, R_BITS % (R_SIZE * 8)); // x^R_BITS (if it fits)
    }
    
    extended_gcd(gcd, s, t, a_bin, modulus);
    
    // The inverse is s (coefficient of a in the linear combination)
    memcpy(res_bin, s, R_SIZE);
}

void ntl_split_polynomial(OUT uint8_t e0[R_SIZE],
        OUT uint8_t e1[R_SIZE],
        IN const uint8_t e[2*R_SIZE])
{
    // e0 = e mod x^R_BITS (lower R_BITS bits)
    memcpy(e0, e, R_SIZE);
    
    // Clear any bits beyond R_BITS in e0
    int remaining_bits = R_BITS % 8;
    if (remaining_bits > 0) {
        int last_byte = (R_BITS - 1) / 8;
        uint8_t mask = (1U << remaining_bits) - 1;
        e0[last_byte] &= mask;
        // Clear all bytes beyond the last partial byte
        for (int i = last_byte + 1; i < R_SIZE; i++) {
            e0[i] = 0;
        }
    }
    
    // e1 = e >> R_BITS (upper R_BITS bits shifted down)
    memset(e1, 0, R_SIZE);
    
    int byte_shift = R_BITS / 8;
    int bit_shift = R_BITS % 8;
    
    for (int i = 0; i < R_SIZE && (i + byte_shift) < 2 * R_SIZE; i++) {
        e1[i] = e[i + byte_shift] >> bit_shift;
        if (bit_shift > 0 && (i + byte_shift + 1) < 2 * R_SIZE) {
            e1[i] |= e[i + byte_shift + 1] << (8 - bit_shift);
        }
    }
}